///////////////////////////////////////////////////////////////////////////
// Description: MemberServicesBase Class
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.BusinessObject;

namespace findmyfamilies.Services {

	/// <summary>
	/// Purpose: Services Facade Base Class for MemberServicesBase
	/// </summary>
	public class MemberServicesBase {

		/// <summary>
		/// Purpose: Create a Address
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual AddressDO CreateAddress(AddressDO addressDO) {
			return AddressBO.CreateAddress(addressDO);
		}
		
		/// <summary>
		/// Purpose: Create Addresss
		/// </summary>
		/// <param name = "addressDOs">ICollection addressDOs</param>
		public virtual ICollection CreateAddresss(IList addressDOs) {
			return AddressBO.CreateAddresss(addressDOs);
		}
		
		private static AddressBO m_AddressBO;
		
		public AddressBO AddressBO {
			get {
				if (m_AddressBO == null) {
					MemberServicesBase memberServices = new MemberServicesBase();
					lock(memberServices) {
						m_AddressBO = new AddressBO();
					}
				}
				return m_AddressBO;
			}
		}
		
		/// <summary>
		/// Purpose: Get a Address with a primary key
		///      Must pass a Address_ID in the data object
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual AddressDO ReadAddress(AddressDO addressDO) {
			return AddressBO.ReadAddress(addressDO);
		}
		
		/// <summary>
		/// Purpose: Read all Addresss
		/// </summary>
		/// <returns>Returns a collection of Address data objects</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public virtual ICollection ReadAddresssAll(DataTransferObject dataTransferObject) {
			return AddressBO.ReadAddresssAll(dataTransferObject);
		}
		
		/// <summary>
		/// Purpose: Read Addresss by page
		/// </summary>
		/// <returns>Returns Address data objects by page</returns>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual ICollection ReadAddresssByPage(AddressDO addressDO) {
			return AddressBO.ReadAddresssByPage(addressDO);
		}
		
		/// <summary>
		/// Purpose: Update a Address
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual void UpdateAddress(AddressDO addressDO) {
			AddressBO.UpdateAddress(addressDO);
		}
		
		/// <summary>
		/// Purpose: Update Addresss
		/// </summary>
		/// <param name = "addressDOs">ICollection addressDOs</param>
		public virtual void UpdateAddresss(IList addressDOs) {
			AddressBO.UpdateAddresss(addressDOs);
		}
		
		/// <summary>
		/// Purpose: Delete a Address
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual void DeleteAddress(AddressDO addressDO) {
			AddressBO.DeleteAddress(addressDO);
		}

		/// <summary>
		/// Purpose: Delete Addresss
		/// </summary>
		/// <param name = "addressDOs">ICollection addressDOs</param>
		public virtual void DeleteAddresss(IList addressDOs) {
			AddressBO.DeleteAddresss(addressDOs);
		}
		
		/// <summary>
		/// Purpose: Create a Member
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual MemberDO CreateMember(MemberDO memberDO) {
			return MemberBO.CreateMember(memberDO);
		}
		
		/// <summary>
		/// Purpose: Create Members
		/// </summary>
		/// <param name = "memberDOs">ICollection memberDOs</param>
		public virtual ICollection CreateMembers(IList memberDOs) {
			return MemberBO.CreateMembers(memberDOs);
		}
		
		private static MemberBO m_MemberBO;
		
		public MemberBO MemberBO {
			get {
				if (m_MemberBO == null) {
					MemberServicesBase memberServices = new MemberServicesBase();
					lock(memberServices) {
						m_MemberBO = new MemberBO();
					}
				}
				return m_MemberBO;
			}
		}
		
		/// <summary>
		/// Purpose: Get a Member with a primary key
		///      Must pass a Member_ID in the data object
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual MemberDO ReadMember(MemberDO memberDO) {
			return MemberBO.ReadMember(memberDO);
		}
		
		/// <summary>
		/// Purpose: Read all Members
		/// </summary>
		/// <returns>Returns a collection of Member data objects</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public virtual ICollection ReadMembersAll(DataTransferObject dataTransferObject) {
			return MemberBO.ReadMembersAll(dataTransferObject);
		}
		
		/// <summary>
		/// Purpose: Read Members by page
		/// </summary>
		/// <returns>Returns Member data objects by page</returns>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual ICollection ReadMembersByPage(MemberDO memberDO) {
			return MemberBO.ReadMembersByPage(memberDO);
		}
		
		/// <summary>
		/// Purpose: Update a Member
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual void UpdateMember(MemberDO memberDO) {
			MemberBO.UpdateMember(memberDO);
		}
		
		/// <summary>
		/// Purpose: Update Members
		/// </summary>
		/// <param name = "memberDOs">ICollection memberDOs</param>
		public virtual void UpdateMembers(IList memberDOs) {
			MemberBO.UpdateMembers(memberDOs);
		}
		
		/// <summary>
		/// Purpose: Delete a Member
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual void DeleteMember(MemberDO memberDO) {
			MemberBO.DeleteMember(memberDO);
		}

		/// <summary>
		/// Purpose: Delete Members
		/// </summary>
		/// <param name = "memberDOs">ICollection memberDOs</param>
		public virtual void DeleteMembers(IList memberDOs) {
			MemberBO.DeleteMembers(memberDOs);
		}
		
	}
}
