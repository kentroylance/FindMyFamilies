///////////////////////////////////////////////////////////////////////////
// Description: PersonServicesBase Class
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.BusinessObject;

namespace findmyfamilies.Services {

	/// <summary>
	/// Purpose: Services Facade Base Class for PersonServicesBase
	/// </summary>
	public class PersonServicesBase {

		/// <summary>
		/// Purpose: Create a FindPersonOptions
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual FindPersonOptionsDO CreateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			return FindPersonOptionsBO.CreateFindPersonOptions(findPersonOptionsDO);
		}
		
		/// <summary>
		/// Purpose: Create FindPersonOptionss
		/// </summary>
		/// <param name = "findPersonOptionsDOs">ICollection findPersonOptionsDOs</param>
		public virtual ICollection CreateFindPersonOptionss(IList findPersonOptionsDOs) {
			return FindPersonOptionsBO.CreateFindPersonOptionss(findPersonOptionsDOs);
		}
		
		private static FindPersonOptionsBO m_FindPersonOptionsBO;
		
		public FindPersonOptionsBO FindPersonOptionsBO {
			get {
				if (m_FindPersonOptionsBO == null) {
					PersonServicesBase personServices = new PersonServicesBase();
					lock(personServices) {
						m_FindPersonOptionsBO = new FindPersonOptionsBO();
					}
				}
				return m_FindPersonOptionsBO;
			}
		}
		
		/// <summary>
		/// Purpose: Get a FindPersonOptions with a primary key
		///      Must pass a Find_Person_Options_ID in the data object
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual FindPersonOptionsDO ReadFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			return FindPersonOptionsBO.ReadFindPersonOptions(findPersonOptionsDO);
		}
		
		/// <summary>
		/// Purpose: Read all FindPersonOptionss
		/// </summary>
		/// <returns>Returns a collection of FindPersonOptions data objects</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public virtual ICollection ReadFindPersonOptionssAll(DataTransferObject dataTransferObject) {
			return FindPersonOptionsBO.ReadFindPersonOptionssAll(dataTransferObject);
		}
		
		/// <summary>
		/// Purpose: Read FindPersonOptionss by page
		/// </summary>
		/// <returns>Returns FindPersonOptions data objects by page</returns>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual ICollection ReadFindPersonOptionssByPage(FindPersonOptionsDO findPersonOptionsDO) {
			return FindPersonOptionsBO.ReadFindPersonOptionssByPage(findPersonOptionsDO);
		}
		
		/// <summary>
		/// Purpose: Update a FindPersonOptions
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual void UpdateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			FindPersonOptionsBO.UpdateFindPersonOptions(findPersonOptionsDO);
		}
		
		/// <summary>
		/// Purpose: Update FindPersonOptionss
		/// </summary>
		/// <param name = "findPersonOptionsDOs">ICollection findPersonOptionsDOs</param>
		public virtual void UpdateFindPersonOptionss(IList findPersonOptionsDOs) {
			FindPersonOptionsBO.UpdateFindPersonOptionss(findPersonOptionsDOs);
		}
		
		/// <summary>
		/// Purpose: Delete a FindPersonOptions
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual void DeleteFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			FindPersonOptionsBO.DeleteFindPersonOptions(findPersonOptionsDO);
		}

		/// <summary>
		/// Purpose: Delete FindPersonOptionss
		/// </summary>
		/// <param name = "findPersonOptionsDOs">ICollection findPersonOptionsDOs</param>
		public virtual void DeleteFindPersonOptionss(IList findPersonOptionsDOs) {
			FindPersonOptionsBO.DeleteFindPersonOptionss(findPersonOptionsDOs);
		}
		
		/// <summary>
		/// Purpose: Create a Report
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual ReportDO CreateReport(ReportDO reportDO) {
			return ReportBO.CreateReport(reportDO);
		}
		
		/// <summary>
		/// Purpose: Create Reports
		/// </summary>
		/// <param name = "reportDOs">ICollection reportDOs</param>
		public virtual ICollection CreateReports(IList reportDOs) {
			return ReportBO.CreateReports(reportDOs);
		}
		
		private static ReportBO m_ReportBO;
		
		public ReportBO ReportBO {
			get {
				if (m_ReportBO == null) {
					PersonServicesBase personServices = new PersonServicesBase();
					lock(personServices) {
						m_ReportBO = new ReportBO();
					}
				}
				return m_ReportBO;
			}
		}
		
		/// <summary>
		/// Purpose: Get a Report with a primary key
		///      Must pass a Report_ID in the data object
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual ReportDO ReadReport(ReportDO reportDO) {
			return ReportBO.ReadReport(reportDO);
		}
		
		/// <summary>
		/// Purpose: Read all Reports
		/// </summary>
		/// <returns>Returns a collection of Report data objects</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public virtual ICollection ReadReportsAll(DataTransferObject dataTransferObject) {
			return ReportBO.ReadReportsAll(dataTransferObject);
		}
		
		/// <summary>
		/// Purpose: Read Reports by page
		/// </summary>
		/// <returns>Returns Report data objects by page</returns>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual ICollection ReadReportsByPage(ReportDO reportDO) {
			return ReportBO.ReadReportsByPage(reportDO);
		}
		
		/// <summary>
		/// Purpose: Update a Report
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual void UpdateReport(ReportDO reportDO) {
			ReportBO.UpdateReport(reportDO);
		}
		
		/// <summary>
		/// Purpose: Update Reports
		/// </summary>
		/// <param name = "reportDOs">ICollection reportDOs</param>
		public virtual void UpdateReports(IList reportDOs) {
			ReportBO.UpdateReports(reportDOs);
		}
		
		/// <summary>
		/// Purpose: Delete a Report
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual void DeleteReport(ReportDO reportDO) {
			ReportBO.DeleteReport(reportDO);
		}

		/// <summary>
		/// Purpose: Delete Reports
		/// </summary>
		/// <param name = "reportDOs">ICollection reportDOs</param>
		public virtual void DeleteReports(IList reportDOs) {
			ReportBO.DeleteReports(reportDOs);
		}
		
		
	}
}
