///////////////////////////////////////////////////////////////////////////
// Description: Unit Test class for 'Translation'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Reflection;

using NUnit.Framework;
using XtUnit.Extensions.Royo;
using XtUnit.Framework;

using FindMyFamilies.Data;
using FindMyFamilies.Services;

namespace FindMyFamilies.Tests {

	/// <summary>
	/// Summary description for CommandTests.
	/// </summary>
	[TestFixture]
	public class TranslationTest : UnitTestBase    {

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		public string[] validateFields = {
			TranslationDO.LANGUAGE_ID
		};

		public TranslationTest() {
			Init();
		}

		public TranslationTest(string testMethod) : base(testMethod) {
			Init();
		}

		private void Init() {
			this.DataFile = "TranslationData.xml";
			this.DataObjectType = "TranslationDO";
		
			if (this.TestDataArray.Count < 1) {
				this.LoadData();
			}
		}
		

		public void CreateTranslation(ref TranslationDO inputData) {
			inputData = (TranslationDO) AdminServices.Instance().CreateTranslation(inputData);
			if (inputData.Translation_ID < 1) {
				throw new TestException("Failed: Cannot create a Translation. ", null);
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestCreateTranslations() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					TranslationDO outputData = (TranslationDO) AdminServices.Instance().CreateTranslation(inputData);
					if (outputData.Translation_ID > 0) {
						if (testData.ReadDataObject != null) {
							((TranslationDO) testData.ReadDataObject).Translation_ID = outputData.Translation_ID;
						}
						if (testData.UpdateDataObject != null) {
							((TranslationDO) testData.UpdateDataObject).Translation_ID = outputData.Translation_ID;
						}
						outputData = AdminServices.Instance().ReadTranslation(outputData);
					}
					if (outputData.Translation_ID < 1) {
						throw new TestException();
					} else {
						Validate(validateFields, inputData, outputData);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot create a Translation. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestUpdateTranslations() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateTranslation(ref inputData);
					if (inputData.Translation_ID > 0) {
						TranslationDO translationInput = (TranslationDO) testData.UpdateDataObject;
						translationInput.GetSecurityData(testData.Username, testData.Password, this.Language);
						translationInput.Translation_ID = inputData.Translation_ID;
						AdminServices.Instance().UpdateTranslation(translationInput);
						TranslationDO outputData = AdminServices.Instance().ReadTranslation(translationInput);
						if (outputData.Translation_ID > 0) {
							Validate(validateFields, translationInput, outputData);
						} else {
							throw new TestException("Failed: Cannot update a Translation. ", null);
						}
					} else {
						throw new TestException();
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot update a Translation. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestDeleteTranslations() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateTranslation(ref inputData);
					if (inputData.Translation_ID > 0) {
						AdminServices.Instance().DeleteTranslation(inputData);
						inputData = AdminServices.Instance().ReadTranslation(inputData);
						if (inputData.Translation_ID > 0) {
							throw new TestException("Failed: Cannot delete a Translation. ", null);
						}
					} else {
						throw new TestException();
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot delete a Translation. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadTranslation() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateTranslation(ref inputData);
					if (inputData.Translation_ID > 0) {
						TranslationDO outputData = AdminServices.Instance().ReadTranslation(inputData);
						if (outputData.IsEmpty()) {
							throw new TestException("Failed: Cannot read a Translation. ", null);
						} else {
							Validate(validateFields, inputData, outputData);
						}
					} else {
						throw new TestException("Failed: Cannot create a Translation. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read a Translation. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadAllTranslations() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateTranslation(ref inputData);
					if (inputData.Translation_ID > 0) {
						ICollection results = (ICollection) AdminServices.Instance().ReadTranslationsAll(inputData);
						if (results.Count < 1) {
							throw new TestException();
						}
					} else {
						throw new TestException("Failed: Cannot create a Translation. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read all Translations. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadTranslationsByPage() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					TranslationDO inputData = (TranslationDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateTranslation(ref inputData);
					if (inputData.Translation_ID > 0) {
						inputData.Paging.PageIndex = 1;
						inputData.Paging.PageSize = 100;
						ICollection results = (ICollection) AdminServices.Instance().ReadTranslationsByPage(inputData);
						if (results.Count < 1) {
							throw new TestException();
						}
					} else {
						throw new TestException("Failed: Cannot create a Translation. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read Translations by page. ", ex);
				}
			}
		}
	}
}
