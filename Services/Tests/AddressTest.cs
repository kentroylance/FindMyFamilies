///////////////////////////////////////////////////////////////////////////
// Description: Unit Test class for 'Address'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Reflection;

using NUnit.Framework;
using XtUnit.Extensions.Royo;
using XtUnit.Framework;

using FindMyFamilies.Data;
using FindMyFamilies.Services;

namespace FindMyFamilies.Tests {

	/// <summary>
	/// Summary description for CommandTests.
	/// </summary>
	[TestFixture]
	public class AddressTest : UnitTestBase    {


		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		public string[] validateFields = {
			AddressDO.LANGUAGE_ID
		};

		public AddressTest() {
			Init();
		}

		public AddressTest(string testMethod) : base(testMethod) {
			Init();
		}

		private void Init() {
			this.DataFile = "AddressData.xml";
			this.DataObjectType = "AddressDO";
		
			if (this.TestDataArray.Count < 1) {
				this.LoadData();
			}
		}
		

		public void CreateAddress(ref AddressDO inputData) {
			inputData = (AddressDO) MemberServices.Instance().CreateAddress(inputData);
			if (inputData.Address_ID < 1) {
				throw new TestException("Failed: Cannot create a Address. ", null);
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestCreateAddresss() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					AddressDO outputData = (AddressDO) MemberServices.Instance().CreateAddress(inputData);
					if (outputData.Address_ID > 0) {
						if (testData.ReadDataObject != null) {
							((AddressDO) testData.ReadDataObject).Address_ID = outputData.Address_ID;
						}
						if (testData.UpdateDataObject != null) {
							((AddressDO) testData.UpdateDataObject).Address_ID = outputData.Address_ID;
						}
						outputData = MemberServices.Instance().ReadAddress(outputData);
					}
					if (outputData.Address_ID < 1) {
						throw new TestException();
					} else {
						Validate(validateFields, inputData, outputData);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot create a Address. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestUpdateAddresss() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateAddress(ref inputData);
					if (inputData.Address_ID > 0) {
						AddressDO addressInput = (AddressDO) testData.UpdateDataObject;
						addressInput.GetSecurityData(testData.Username, testData.Password, this.Language);
						addressInput.Address_ID = inputData.Address_ID;
						MemberServices.Instance().UpdateAddress(addressInput);
						AddressDO outputData = MemberServices.Instance().ReadAddress(addressInput);
						if (outputData.Address_ID > 0) {
							Validate(validateFields, addressInput, outputData);
						} else {
							throw new TestException("Failed: Cannot update a Address. ", null);
						}
					} else {
						throw new TestException();
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot update a Address. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestDeleteAddresss() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateAddress(ref inputData);
					if (inputData.Address_ID > 0) {
						MemberServices.Instance().DeleteAddress(inputData);
						inputData = MemberServices.Instance().ReadAddress(inputData);
						if (inputData.Address_ID > 0) {
							throw new TestException("Failed: Cannot delete a Address. ", null);
						}
					} else {
						throw new TestException();
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot delete a Address. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadAddress() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateAddress(ref inputData);
					if (inputData.Address_ID > 0) {
						AddressDO outputData = MemberServices.Instance().ReadAddress(inputData);
						if (outputData.IsEmpty()) {
							throw new TestException("Failed: Cannot read a Address. ", null);
						} else {
							Validate(validateFields, inputData, outputData);
						}
					} else {
						throw new TestException("Failed: Cannot create a Address. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read a Address. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadAllAddresss() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateAddress(ref inputData);
					if (inputData.Address_ID > 0) {
						ICollection results = (ICollection) MemberServices.Instance().ReadAddresssAll(inputData);
						if (results.Count < 1) {
							throw new TestException();
						}
					} else {
						throw new TestException("Failed: Cannot create a Address. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read all Addresss. ", ex);
				}
			}
		}
		
		[Test, CustomRollBack, CustomTracing]
		public void TestReadAddresssByPage() {
			for (this.Row = 1; this.Row < this.TestDataArray.Count; this.Row++) {
				try {
					TestData testData = (TestData) this.TestDataArray[this.Row];
					AddressDO inputData = (AddressDO) testData.ReadDataObject;
					inputData.GetSecurityData(testData.Username, testData.Password, this.Language);
					CreateAddress(ref inputData);
					if (inputData.Address_ID > 0) {
						inputData.Paging.PageIndex = 1;
						inputData.Paging.PageSize = 100;
						ICollection results = (ICollection) MemberServices.Instance().ReadAddresssByPage(inputData);
						if (results.Count < 1) {
							throw new TestException();
						}
					} else {
						throw new TestException("Failed: Cannot create a Address. ", null);
					}
				} catch (Exception ex) {
					throw new TestException("Failed: Cannot read Addresss by page. ", ex);
				}
			}
		}
	}
}

