///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Translation_Detail'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for TranslationDetail
	/// </summary>
	public class TranslationDetailBO : FindMyFamilies.BusinessObject.TranslationDetailBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TranslationDetailBO() : base() {
		}

		/// <summary>
		/// Purpose: Create TranslationDetail records in the database
		/// </summary>
		/// <returns>Returns a list of TranslationDetails by reference with their new primary key</returns>
		/// <param name = "translationDetails">IList translationDetails.</param>
		public ICollection CreateTranslationDetails(IList translationDetails) {
			if (translationDetails != null) {
				if (translationDetails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationDetails.Count; i++) {
							this.CreateTranslationDetail((TranslationDetailDO)translationDetails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_CREATE, base.GetLanguage(translationDetails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateTranslationDetail((TranslationDetailDO)translationDetails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_CREATE, base.GetLanguage(translationDetails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return translationDetails;
		}

		/// <summary>
		/// Purpose: Create a TranslationDetail record in the database
		/// </summary>
		/// <returns>Returns a TranslationDetail by reference with its new primary key</returns>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public override TranslationDetailDO CreateTranslationDetail(TranslationDetailDO translationDetailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationDetailDO)) {
				translationDetailDO = base.CreateTranslationDetail(translationDetailDO);
			}
			return translationDetailDO;
		}

		/// <summary>
		/// Purpose: Retrieves a TranslationDetail record by (Translation_Detail_ID)
		/// </summary>
		/// <returns>Returns a TranslationDetail Data Object by reference</returns>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public override TranslationDetailDO ReadTranslationDetail(TranslationDetailDO translationDetailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationDetailDO)) {
				translationDetailDO = base.ReadTranslationDetail(translationDetailDO);
			}
			return translationDetailDO;
		}

		/// <summary>
		/// Purpose: Retrieves all TranslationDetails
		/// </summary>
		/// <returns>Returns a Collection of TranslationDetailDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadTranslationDetailsAll(DataTransferObject dataTransferObject) {
			ICollection translationDetails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				translationDetails = base.ReadTranslationDetailsAll(dataTransferObject);
			}
			return translationDetails;
		}

		/// <summary>
		/// Purpose: Retrieves all TranslationDetails for a list control
		/// </summary>
		/// <returns>Returns a Collection of ListItem Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadTranslationDetailsAllList(DataTransferObject dataTransferObject) {
			ICollection translationDetails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				translationDetails = base.ReadTranslationDetailsAllList(dataTransferObject);
			}
			return translationDetails;
		}

		/// <summary>
		/// Purpose: Retrieve TranslationDetails by page
		/// </summary>
		/// <returns>Returns a Collection of TranslationDetailDO Data Objects in a ICollection</returns>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public override ICollection ReadTranslationDetailsByPage(TranslationDetailDO translationDetailDO) {
			ICollection translationDetails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationDetailDO)) {
				translationDetails = base.ReadTranslationDetailsByPage(translationDetailDO);
			}
			return translationDetails;
		}

		/// <summary>
		/// Purpose: Update TranslationDetail records in the database
		/// </summary>
		/// <param name = "translationDetails">IList translationDetails.</param>
		public void UpdateTranslationDetails(IList translationDetails) {
			if (translationDetails != null) {
				if (translationDetails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationDetails.Count; i++) {
							this.UpdateTranslationDetail((TranslationDetailDO)translationDetails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_UPDATE, base.GetLanguage(translationDetails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateTranslationDetail((TranslationDetailDO)translationDetails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_UPDATE, base.GetLanguage(translationDetails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in TranslationDetail table.
//		/// </summary>
//		/// <param name = translationDetails>ICollection translationDetails</param>
//		public override void UpdateTranslationDetails(ICollection translationDetails) {
//			base.UpdateTranslationDetails(translationDetails);
//		}
		/// <summary>
		/// Purpose: Update a TranslationDetail record in the database
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public override void UpdateTranslationDetail(TranslationDetailDO translationDetailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationDetailDO)) {
				base.UpdateTranslationDetail(translationDetailDO);
			}
		}

		/// <summary>
		/// Purpose: Delete TranslationDetail records in the database
		/// </summary>
		/// <param name = "translationDetails">IList translationDetails.</param>
		public void DeleteTranslationDetails(IList translationDetails) {
			if (translationDetails != null) {
				if (translationDetails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationDetails.Count; i++) {
							this.DeleteTranslationDetail((TranslationDetailDO)translationDetails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_DELETE, base.GetLanguage(translationDetails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteTranslationDetail((TranslationDetailDO)translationDetails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_DELETE, base.GetLanguage(translationDetails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a TranslationDetail record in the database
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public override void DeleteTranslationDetail(TranslationDetailDO translationDetailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationDetailDO)) {
				base.DeleteTranslationDetail(translationDetailDO);
			}
		}

	}
}
