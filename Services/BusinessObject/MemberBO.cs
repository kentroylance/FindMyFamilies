///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Member'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for Member
	/// </summary>
	public class MemberBO : FindMyFamilies.BusinessObject.MemberBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public MemberBO() : base() {
		}

		/// <summary>
		/// Purpose: Create Member records in the database
		/// </summary>
		/// <returns>Returns a list of Members by reference with their new primary key</returns>
		/// <param name = "members">IList members.</param>
		public ICollection CreateMembers(IList members) {
			if (members != null) {
				if (members.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < members.Count; i++) {
							this.CreateMember((MemberDO)members[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_CREATE, base.GetLanguage(members), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateMember((MemberDO)members[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_CREATE, base.GetLanguage(members));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return members;
		}

		/// <summary>
		/// Purpose: Create a Member record in the database
		/// </summary>
		/// <returns>Returns a Member by reference with its new primary key</returns>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public override MemberDO CreateMember(MemberDO memberDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, memberDO)) {
				memberDO = base.CreateMember(memberDO);
			}
			return memberDO;
		}

		/// <summary>
		/// Purpose: Retrieves a Member record by (Member_ID)
		/// </summary>
		/// <returns>Returns a Member Data Object by reference</returns>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public override MemberDO ReadMember(MemberDO memberDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, memberDO)) {
				memberDO = base.ReadMember(memberDO);
			}
			return memberDO;
		}

		/// <summary>
		/// Purpose: Retrieves all Members
		/// </summary>
		/// <returns>Returns a Collection of MemberDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadMembersAll(DataTransferObject dataTransferObject) {
			ICollection members = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				members = base.ReadMembersAll(dataTransferObject);
			}
			return members;
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData Members by page
		/// </summary>
		/// <returns>Returns a Collection of MemberDO Data Objects in a ICollection</returns>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public override ICollection ReadMembersByPage(MemberDO memberDO) {
			ICollection members = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, memberDO)) {
				members = base.ReadMembersByPage(memberDO);
			}
			return members;
		}

		/// <summary>
		/// Purpose: Update Member records in the database
		/// </summary>
		/// <param name = "members">IList members.</param>
		public void UpdateMembers(IList members) {
			if (members != null) {
				if (members.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < members.Count; i++) {
							this.UpdateMember((MemberDO)members[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_UPDATE, base.GetLanguage(members), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateMember((MemberDO)members[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_UPDATE, base.GetLanguage(members));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in Member table.
//		/// </summary>
//		/// <param name = members>ICollection members</param>
//		public override void UpdateMembers(ICollection members) {
//			base.UpdateMembers(members);
//		}
		/// <summary>
		/// Purpose: Update a Member record in the database
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public override void UpdateMember(MemberDO memberDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, memberDO)) {
				base.UpdateMember(memberDO);
			}
		}

		/// <summary>
		/// Purpose: Delete Member records in the database
		/// </summary>
		/// <param name = "members">IList members.</param>
		public void DeleteMembers(IList members) {
			if (members != null) {
				if (members.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < members.Count; i++) {
							this.DeleteMember((MemberDO)members[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_DELETE, base.GetLanguage(members), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteMember((MemberDO)members[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_DELETE, base.GetLanguage(members));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a Member record in the database
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public override void DeleteMember(MemberDO memberDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, memberDO)) {
				base.DeleteMember(memberDO);
			}
		}

   		public virtual MemberDO ReadMemberByMemberID(int memberID) {
			return MemberDAO.ReadMemberByMemberID(memberID);
		}


	}
}
