///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Email'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for Email
	/// </summary>
	public class EmailBO : FindMyFamilies.BusinessObject.EmailBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public EmailBO() : base() {
		}

		/// <summary>
		/// Purpose: Create Email records in the database
		/// </summary>
		/// <returns>Returns a list of Emails by reference with their new primary key</returns>
		/// <param name = "emails">IList emails.</param>
		public ICollection CreateEmails(IList emails) {
			if (emails != null) {
				if (emails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < emails.Count; i++) {
							this.CreateEmail((EmailDO)emails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_CREATE, base.GetLanguage(emails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateEmail((EmailDO)emails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_CREATE, base.GetLanguage(emails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return emails;
		}

		/// <summary>
		/// Purpose: Create a Email record in the database
		/// </summary>
		/// <returns>Returns a Email by reference with its new primary key</returns>
		/// <param name = "emailDO">EmailDO emailDO.</param>
		public EmailDO CreateEmail(EmailDO emailDO, ref SessionDO session) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, emailDO)) {
				emailDO = base.CreateEmail(emailDO);
			}
			return emailDO;
		}

		/// <summary>
		/// Purpose: Create a Email
		/// </summary>
		/// <param name = "string">string email</param>
		public EmailDO SubscribeEmail(string email, SessionDO session) {
		    EmailDO emailResult = null;
		    EmailDO foundEmail = EmailDAO.ReadEmailByEmail(email);
            string personId = null;
            if ((session != null) && (session.CurrentPerson != null)) {
                personId = session.CurrentPerson.Id;
            }
            if (foundEmail.EmailID == 0) {
                var emailDo = new EmailDO();
                emailDo.Email = email;
                emailDo.DateCreated = DateTime.Now;
                emailDo.PersonID = personId;
                emailDo.AllowedToSend = true;
                emailResult = base.CreateEmail(emailDo);
            } else {
                if (!string.IsNullOrEmpty(personId) && string.IsNullOrEmpty(foundEmail.PersonID)) {
                    foundEmail.PersonID = personId;
                    base.UpdateEmail(foundEmail);
                }
            }
			return emailResult;
		}


		/// <summary>
		/// Purpose: Retrieves a Email record by (Email_ID)
		/// </summary>
		/// <returns>Returns a Email Data Object by reference</returns>
		/// <param name = "emailDO">EmailDO emailDO.</param>
		public override EmailDO ReadEmail(EmailDO emailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, emailDO)) {
				emailDO = base.ReadEmail(emailDO);
			}
			return emailDO;
		}

		/// <summary>
		/// Purpose: Retrieves all Emails
		/// </summary>
		/// <returns>Returns a Collection of EmailDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadEmailsAll(DataTransferObject dataTransferObject) {
			ICollection emails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				emails = base.ReadEmailsAll(dataTransferObject);
			}
			return emails;
		}

		/// <summary>
		/// Purpose: Retrieves all Emails for a list control
		/// </summary>
		/// <returns>Returns a Collection of ListItem Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadEmailsAllList(DataTransferObject dataTransferObject) {
			ICollection emails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				emails = base.ReadEmailsAllList(dataTransferObject);
			}
			return emails;
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData Emails by page
		/// </summary>
		/// <returns>Returns a Collection of EmailDO Data Objects in a ICollection</returns>
		/// <param name = "emailDO">EmailDO emailDO.</param>
		public override ICollection ReadEmailsByPage(EmailDO emailDO) {
			ICollection emails = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, emailDO)) {
				emails = base.ReadEmailsByPage(emailDO);
			}
			return emails;
		}

		/// <summary>
		/// Purpose: Update Email records in the database
		/// </summary>
		/// <param name = "emails">IList emails.</param>
		public void UpdateEmails(IList emails) {
			if (emails != null) {
				if (emails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < emails.Count; i++) {
							this.UpdateEmail((EmailDO)emails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_UPDATE, base.GetLanguage(emails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateEmail((EmailDO)emails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_UPDATE, base.GetLanguage(emails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in Email table.
//		/// </summary>
//		/// <param name = emails>ICollection emails</param>
//		public override void UpdateEmails(ICollection emails) {
//			base.UpdateEmails(emails);
//		}
		/// <summary>
		/// Purpose: Update a Email record in the database
		/// </summary>
		/// <param name = "emailDO">EmailDO emailDO.</param>
		public override void UpdateEmail(EmailDO emailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, emailDO)) {
				base.UpdateEmail(emailDO);
			}
		}

		/// <summary>
		/// Purpose: Delete Email records in the database
		/// </summary>
		/// <param name = "emails">IList emails.</param>
		public void DeleteEmails(IList emails) {
			if (emails != null) {
				if (emails.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < emails.Count; i++) {
							this.DeleteEmail((EmailDO)emails[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_DELETE, base.GetLanguage(emails), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteEmail((EmailDO)emails[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.EMAIL_CANNOT_DELETE, base.GetLanguage(emails));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a Email record in the database
		/// </summary>
		/// <param name = "emailDO">EmailDO emailDO.</param>
		public override void DeleteEmail(EmailDO emailDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, emailDO)) {
				base.DeleteEmail(emailDO);
			}
		}

	}
}
