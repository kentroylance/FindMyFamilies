///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Next_ID'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for NextID
	/// </summary>
	public class NextIDBO : FindMyFamilies.BusinessObject.NextIDBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public NextIDBO() : base() {
		}

		/// <summary>
		/// Purpose: Create NextID records in the database
		/// </summary>
		/// <returns>Returns a list of NextIDs by reference with their new primary key</returns>
		/// <param name = "nextIDs">IList nextIDs.</param>
		public ICollection CreateNextIDs(IList nextIDs) {
			if (nextIDs != null) {
				if (nextIDs.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < nextIDs.Count; i++) {
							this.CreateNextID((NextIDDO)nextIDs[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_CREATE, base.GetLanguage(nextIDs), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateNextID((NextIDDO)nextIDs[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_CREATE, base.GetLanguage(nextIDs));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return nextIDs;
		}

		/// <summary>
		/// Purpose: Create a NextID record in the database
		/// </summary>
		/// <returns>Returns a NextID by reference with its new primary key</returns>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public override NextIDDO CreateNextID(NextIDDO nextIDDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, nextIDDO)) {
				nextIDDO = base.CreateNextID(nextIDDO);
			}
			return nextIDDO;
		}

		/// <summary>
		/// Purpose: Retrieves a NextID record by (Table_ID)
		/// </summary>
		/// <returns>Returns a NextID Data Object by reference</returns>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public override NextIDDO ReadNextID(NextIDDO nextIDDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, nextIDDO)) {
				nextIDDO = base.ReadNextID(nextIDDO);
			}
			return nextIDDO;
		}

		/// <summary>
		/// Purpose: Retrieves all NextIDs
		/// </summary>
		/// <returns>Returns a Collection of NextIDDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadNextIDsAll(DataTransferObject dataTransferObject) {
			ICollection nextIDs = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				nextIDs = base.ReadNextIDsAll(dataTransferObject);
			}
			return nextIDs;
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData NextIDs by page
		/// </summary>
		/// <returns>Returns a Collection of NextIDDO Data Objects in a ICollection</returns>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public override ICollection ReadNextIDsByPage(NextIDDO nextIDDO) {
			ICollection nextIDs = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, nextIDDO)) {
				nextIDs = base.ReadNextIDsByPage(nextIDDO);
			}
			return nextIDs;
		}

		/// <summary>
		/// Purpose: Update NextID records in the database
		/// </summary>
		/// <param name = "nextIDs">IList nextIDs.</param>
		public void UpdateNextIDs(IList nextIDs) {
			if (nextIDs != null) {
				if (nextIDs.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < nextIDs.Count; i++) {
							this.UpdateNextID((NextIDDO)nextIDs[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_UPDATE, base.GetLanguage(nextIDs), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateNextID((NextIDDO)nextIDs[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_UPDATE, base.GetLanguage(nextIDs));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in NextID table.
//		/// </summary>
//		/// <param name = nextIDs>ICollection nextIDs</param>
//		public override void UpdateNextIDs(ICollection nextIDs) {
//			base.UpdateNextIDs(nextIDs);
//		}

		/// <summary>
		/// Purpose: Update a NextID record in the database
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public override void UpdateNextID(NextIDDO nextIDDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, nextIDDO)) {
				base.UpdateNextID(nextIDDO);
			}
		}

		/// <summary>
		/// Purpose: Delete NextID records in the database
		/// </summary>
		/// <param name = "nextIDs">IList nextIDs.</param>
		public void DeleteNextIDs(IList nextIDs) {
			if (nextIDs != null) {
				if (nextIDs.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < nextIDs.Count; i++) {
							this.DeleteNextID((NextIDDO)nextIDs[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_DELETE, base.GetLanguage(nextIDs), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteNextID((NextIDDO)nextIDs[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_DELETE, base.GetLanguage(nextIDs));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a NextID record in the database
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public override void DeleteNextID(NextIDDO nextIDDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, nextIDDO)) {
				base.DeleteNextID(nextIDDO);
			}
		}

	}
}
