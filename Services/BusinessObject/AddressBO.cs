///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Address'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for Address
	/// </summary>
	public class AddressBO : FindMyFamilies.BusinessObject.AddressBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AddressBO() : base() {
		}

		/// <summary>
		/// Purpose: Create Address records in the database
		/// </summary>
		/// <returns>Returns a list of Addresss by reference with their new primary key</returns>
		/// <param name = "addresss">IList addresss.</param>
		public ICollection CreateAddresss(IList addresss) {
			if (addresss != null) {
				if (addresss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < addresss.Count; i++) {
							this.CreateAddress((AddressDO)addresss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_CREATE, base.GetLanguage(addresss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateAddress((AddressDO)addresss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_CREATE, base.GetLanguage(addresss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return addresss;
		}

		/// <summary>
		/// Purpose: Create a Address record in the database
		/// </summary>
		/// <returns>Returns a Address by reference with its new primary key</returns>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override AddressDO CreateAddress(AddressDO addressDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, addressDO)) {
				addressDO = base.CreateAddress(addressDO);
			}
			return addressDO;
		}

		/// <summary>
		/// Purpose: Retrieves a Address record by (Address_ID)
		/// </summary>
		/// <returns>Returns a Address Data Object by reference</returns>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override AddressDO ReadAddress(AddressDO addressDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, addressDO)) {
				addressDO = base.ReadAddress(addressDO);
			}
			return addressDO;
		}

		/// <summary>
		/// Purpose: Retrieves all Addresss
		/// </summary>
		/// <returns>Returns a Collection of AddressDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadAddresssAll(DataTransferObject dataTransferObject) {
			ICollection addresss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				addresss = base.ReadAddresssAll(dataTransferObject);
			}
			return addresss;
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData Addresss by page
		/// </summary>
		/// <returns>Returns a Collection of AddressDO Data Objects in a ICollection</returns>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override ICollection ReadAddresssByPage(AddressDO addressDO) {
			ICollection addresss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, addressDO)) {
				addresss = base.ReadAddresssByPage(addressDO);
			}
			return addresss;
		}

		/// <summary>
		/// Purpose: Update Address records in the database
		/// </summary>
		/// <param name = "addresss">IList addresss.</param>
		public void UpdateAddresss(IList addresss) {
			if (addresss != null) {
				if (addresss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < addresss.Count; i++) {
							this.UpdateAddress((AddressDO)addresss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_UPDATE, base.GetLanguage(addresss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateAddress((AddressDO)addresss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_UPDATE, base.GetLanguage(addresss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in Address table.
//		/// </summary>
//		/// <param name = addresss>ICollection addresss</param>
//		public override void UpdateAddresss(ICollection addresss) {
//			base.UpdateAddresss(addresss);
//		}
		/// <summary>
		/// Purpose: Update a Address record in the database
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override void UpdateAddress(AddressDO addressDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, addressDO)) {
				base.UpdateAddress(addressDO);
			}
		}

		/// <summary>
		/// Purpose: Delete Address records in the database
		/// </summary>
		/// <param name = "addresss">IList addresss.</param>
		public void DeleteAddresss(IList addresss) {
			if (addresss != null) {
				if (addresss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < addresss.Count; i++) {
							this.DeleteAddress((AddressDO)addresss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_DELETE, base.GetLanguage(addresss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteAddress((AddressDO)addresss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_DELETE, base.GetLanguage(addresss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a Address record in the database
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override void DeleteAddress(AddressDO addressDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, addressDO)) {
				base.DeleteAddress(addressDO);
			}
		}

	}
}
