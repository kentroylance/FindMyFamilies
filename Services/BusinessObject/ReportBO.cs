///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Report'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.IO;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for Report
	/// </summary>
	public class ReportBO : FindMyFamilies.BusinessObject.ReportBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ReportBO() : base() {
		}

		/// <summary>
		/// Purpose: Create Report records in the database
		/// </summary>
		/// <returns>Returns a list of Reports by reference with their new primary key</returns>
		/// <param name = "reports">IList reports.</param>
		public ICollection CreateReports(IList reports) {
			if (reports != null) {
				if (reports.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < reports.Count; i++) {
							this.CreateReport((ReportDO)reports[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_CREATE, base.GetLanguage(reports), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateReport((ReportDO)reports[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_CREATE, base.GetLanguage(reports));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return reports;
		}

		/// <summary>
		/// Purpose: Create a Report record in the database
		/// </summary>
		/// <returns>Returns a Report by reference with its new primary key</returns>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override ReportDO CreateReport(ReportDO reportDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				reportDO = base.CreateReport(reportDO);
			}
			return reportDO;
		}

		/// <summary>
		/// Purpose: Retrieves a Report record by (Report_ID)
		/// </summary>
		/// <returns>Returns a Report Data Object by reference</returns>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override ReportDO ReadReport(ReportDO reportDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				reportDO = base.ReadReport(reportDO);
			}
			return reportDO;
		}

		/// <summary>
		/// Purpose: Retrieves all Reports
		/// </summary>
		/// <returns>Returns a Collection of ReportDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadReportsAll(DataTransferObject dataTransferObject) {
			ICollection reports = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				reports = base.ReadReportsAll(dataTransferObject);
			}
			return reports;
		}

   		/// <summary>
		/// Purpose: Retrieves all Reports based on a specific familysearch id
		/// </summary>
		/// <returns>Returns a Collection of ReportDO Data Objects in a ICollection</returns>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public ICollection ReadReportsByReportBy(ReportDO reportDO) {
			ICollection reports = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				reports = ReportDAO.ReadReportsList(reportDO);
                if (reports.Count > 4) {
                    ArrayList list = (ArrayList) reports;
                    for (int i = reports.Count; i > 4; i--) {
                        int reportID = Convert.ToInt32((((ListItemDO) list[i - 1]).ValueMember));
                        ReportDO deleteDO = new ReportDO(reportID);
                        ReportDAO.DeleteReport(deleteDO);
                        if (!Strings.IsEmpty(deleteDO.ReportFile)) {
                            File.Delete(deleteDO.ReportFile);
                        }
                    }
                }
			}
			return reports;
		}



		/// <summary>
		/// Purpose: RetrieveFamilySearchData Reports by page
		/// </summary>
		/// <returns>Returns a Collection of ReportDO Data Objects in a ICollection</returns>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override ICollection ReadReportsByPage(ReportDO reportDO) {
			ICollection reports = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				reports = base.ReadReportsByPage(reportDO);
			}
			return reports;
		}

		/// <summary>
		/// Purpose: Update Report records in the database
		/// </summary>
		/// <param name = "reports">IList reports.</param>
		public void UpdateReports(IList reports) {
			if (reports != null) {
				if (reports.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < reports.Count; i++) {
							this.UpdateReport((ReportDO)reports[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_UPDATE, base.GetLanguage(reports), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateReport((ReportDO)reports[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_UPDATE, base.GetLanguage(reports));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in Report table.
//		/// </summary>
//		/// <param name = reports>ICollection reports</param>
//		public override void UpdateReports(ICollection reports) {
//			base.UpdateReports(reports);
//		}
		/// <summary>
		/// Purpose: Update a Report record in the database
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override void UpdateReport(ReportDO reportDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				base.UpdateReport(reportDO);
			}
		}

		/// <summary>
		/// Purpose: Delete Report records in the database
		/// </summary>
		/// <param name = "reports">IList reports.</param>
		public void DeleteReports(IList reports) {
			if (reports != null) {
				if (reports.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < reports.Count; i++) {
							this.DeleteReport((ReportDO)reports[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_DELETE, base.GetLanguage(reports), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteReport((ReportDO)reports[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_DELETE, base.GetLanguage(reports));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a Report record in the database
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override void DeleteReport(ReportDO reportDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, reportDO)) {
				base.DeleteReport(reportDO);
			}
		}

	}
}
