///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Find_Person_Options'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for FindPersonOptions
	/// </summary>
	public class FindPersonOptionsBO : FindMyFamilies.BusinessObject.FindPersonOptionsBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FindPersonOptionsBO() : base() {
		}

		/// <summary>
		/// Purpose: Create FindPersonOptions records in the database
		/// </summary>
		/// <returns>Returns a list of FindPersonOptionss by reference with their new primary key</returns>
		/// <param name = "findPersonOptionss">IList findPersonOptionss.</param>
		public ICollection CreateFindPersonOptionss(IList findPersonOptionss) {
			if (findPersonOptionss != null) {
				if (findPersonOptionss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < findPersonOptionss.Count; i++) {
							this.CreateFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_CREATE, base.GetLanguage(findPersonOptionss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_CREATE, base.GetLanguage(findPersonOptionss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return findPersonOptionss;
		}

		/// <summary>
		/// Purpose: Create a FindPersonOptions record in the database
		/// </summary>
		/// <returns>Returns a FindPersonOptions by reference with its new primary key</returns>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public override FindPersonOptionsDO CreateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, findPersonOptionsDO)) {
				findPersonOptionsDO = base.CreateFindPersonOptions(findPersonOptionsDO);
			}
			return findPersonOptionsDO;
		}

		/// <summary>
		/// Purpose: Retrieves a FindPersonOptions record by (Find_Person_Options_ID)
		/// </summary>
		/// <returns>Returns a FindPersonOptions Data Object by reference</returns>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public override FindPersonOptionsDO ReadFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, findPersonOptionsDO)) {
				findPersonOptionsDO = base.ReadFindPersonOptions(findPersonOptionsDO);
			}
			return findPersonOptionsDO;
		}

		/// <summary>
		/// Purpose: Retrieves all FindPersonOptionss
		/// </summary>
		/// <returns>Returns a Collection of FindPersonOptionsDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadFindPersonOptionssAll(DataTransferObject dataTransferObject) {
			ICollection findPersonOptionss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				findPersonOptionss = base.ReadFindPersonOptionssAll(dataTransferObject);
			}
			return findPersonOptionss;
		}

		/// <summary>
		/// Purpose: Retrieve FindPersonOptionss by page
		/// </summary>
		/// <returns>Returns a Collection of FindPersonOptionsDO Data Objects in a ICollection</returns>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public override ICollection ReadFindPersonOptionssByPage(FindPersonOptionsDO findPersonOptionsDO) {
			ICollection findPersonOptionss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, findPersonOptionsDO)) {
				findPersonOptionss = base.ReadFindPersonOptionssByPage(findPersonOptionsDO);
			}
			return findPersonOptionss;
		}

		/// <summary>
		/// Purpose: Update FindPersonOptions records in the database
		/// </summary>
		/// <param name = "findPersonOptionss">IList findPersonOptionss.</param>
		public void UpdateFindPersonOptionss(IList findPersonOptionss) {
			if (findPersonOptionss != null) {
				if (findPersonOptionss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < findPersonOptionss.Count; i++) {
							this.UpdateFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_UPDATE, base.GetLanguage(findPersonOptionss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_UPDATE, base.GetLanguage(findPersonOptionss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in FindPersonOptions table.
//		/// </summary>
//		/// <param name = findPersonOptionss>ICollection findPersonOptionss</param>
//		public override void UpdateFindPersonOptions(ICollection findPersonOptions) {
//			base.UpdateFindPersonOptions(findPersonOptions);
//		}
		/// <summary>
		/// Purpose: Update a FindPersonOptions record in the database
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public override void UpdateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, findPersonOptionsDO)) {
				base.UpdateFindPersonOptions(findPersonOptionsDO);
			}
		}

		/// <summary>
		/// Purpose: Delete FindPersonOptions records in the database
		/// </summary>
		/// <param name = "findPersonOptionss">IList findPersonOptionss.</param>
		public void DeleteFindPersonOptionss(IList findPersonOptionss) {
			if (findPersonOptionss != null) {
				if (findPersonOptionss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < findPersonOptionss.Count; i++) {
							this.DeleteFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_DELETE, base.GetLanguage(findPersonOptionss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteFindPersonOptions((FindPersonOptionsDO)findPersonOptionss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_DELETE, base.GetLanguage(findPersonOptionss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a FindPersonOptions record in the database
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public override void DeleteFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, findPersonOptionsDO)) {
				base.DeleteFindPersonOptions(findPersonOptionsDO);
			}
		}

	}
}
