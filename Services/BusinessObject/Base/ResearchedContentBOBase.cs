///////////////////////////////////////////////////////////////////////////
// Description: Business Object Base class for the 'Researched_Content'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object base class for ResearchedContent
	/// </summary>
	public class ResearchedContentBOBase : BusinessObjectBase {
		// Constant Declarations
		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;
		private static ResearchedContentDAO m_ResearchedContentDAO;

		// Property Declarations
		public static ResearchedContentDAO ResearchedContentDAO {
			get {
				if (m_ResearchedContentDAO == null) {
					ResearchedContentBOBase researchedContentBO = new ResearchedContentBOBase();
					lock(researchedContentBO) {
						m_ResearchedContentDAO = new ResearchedContentDAO();
					}
				}
				return m_ResearchedContentDAO;
			}
		}

		public virtual ResearchedContentDO CreateResearchedContent(ResearchedContentDO researchedContentDO) {
			return ResearchedContentDAO.CreateResearchedContent(researchedContentDO);
		}

		public virtual ResearchedContentDO ReadResearchedContent(ResearchedContentDO researchedContentDO) {
			return ResearchedContentDAO.ReadResearchedContent(researchedContentDO);
		}

		public virtual ICollection ReadResearchedContentsAll(DataTransferObject dataTransferObject) {
			return ResearchedContentDAO.ReadResearchedContentsAll(dataTransferObject);
		}

		public virtual ICollection ReadResearchedContentsAllList(DataTransferObject dataTransferObject) {
			return ResearchedContentDAO.ReadResearchedContentsAllList(dataTransferObject);
		}

		public virtual void UpdateResearchedContent(ResearchedContentDO researchedContentDO) {
			ResearchedContentDAO.UpdateResearchedContent(researchedContentDO);
		}

		public virtual void DeleteResearchedContent(ResearchedContentDO researchedContentDO) {
			ResearchedContentDAO.DeleteResearchedContent(researchedContentDO);
		}

		public virtual ICollection ReadResearchedContentsByPage(ResearchedContentDO researchedContentDO) {
			return ResearchedContentDAO.ReadResearchedContentsByPage(researchedContentDO);
		}

	}
}
