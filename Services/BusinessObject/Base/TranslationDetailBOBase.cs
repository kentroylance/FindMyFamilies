///////////////////////////////////////////////////////////////////////////
// Description: Business Object Base class for the 'Translation_Detail'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object base class for TranslationDetail
	/// </summary>
	public class TranslationDetailBOBase : BusinessObjectBase {
		// Constant Declarations
		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;
		private static TranslationDetailDAO m_TranslationDetailDAO;

		// Property Declarations
		public static TranslationDetailDAO TranslationDetailDAO {
			get {
				if (m_TranslationDetailDAO == null) {
					TranslationDetailBOBase translationDetailBO = new TranslationDetailBOBase();
					lock(translationDetailBO) {
						m_TranslationDetailDAO = new TranslationDetailDAO();
					}
				}
				return m_TranslationDetailDAO;
			}
		}

		public virtual TranslationDetailDO CreateTranslationDetail(TranslationDetailDO translationDetailDO) {
			return TranslationDetailDAO.CreateTranslationDetail(translationDetailDO);
		}

		public virtual TranslationDetailDO ReadTranslationDetail(TranslationDetailDO translationDetailDO) {
			return TranslationDetailDAO.ReadTranslationDetail(translationDetailDO);
		}

		public virtual ICollection ReadTranslationDetailsAll(DataTransferObject dataTransferObject) {
			return TranslationDetailDAO.ReadTranslationDetailsAll(dataTransferObject);
		}

		public virtual ICollection ReadTranslationDetailsAllList(DataTransferObject dataTransferObject) {
			return TranslationDetailDAO.ReadTranslationDetailsAllList(dataTransferObject);
		}

		public virtual void UpdateTranslationDetail(TranslationDetailDO translationDetailDO) {
			TranslationDetailDAO.UpdateTranslationDetail(translationDetailDO);
		}

		public virtual void DeleteTranslationDetail(TranslationDetailDO translationDetailDO) {
			TranslationDetailDAO.DeleteTranslationDetail(translationDetailDO);
		}

		public virtual ICollection ReadTranslationDetailsByPage(TranslationDetailDO translationDetailDO) {
			return TranslationDetailDAO.ReadTranslationDetailsByPage(translationDetailDO);
		}

	}
}
