///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'Translation_Master'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for TranslationMaster
	/// </summary>
	public class TranslationMasterBO : FindMyFamilies.BusinessObject.TranslationMasterBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TranslationMasterBO() : base() {
		}

		/// <summary>
		/// Purpose: Create TranslationMaster records in the database
		/// </summary>
		/// <returns>Returns a list of TranslationMasters by reference with their new primary key</returns>
		/// <param name = "translationMasters">IList translationMasters.</param>
		public ICollection CreateTranslationMasters(IList translationMasters) {
			if (translationMasters != null) {
				if (translationMasters.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationMasters.Count; i++) {
							this.CreateTranslationMaster((TranslationMasterDO)translationMasters[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, base.GetLanguage(translationMasters), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateTranslationMaster((TranslationMasterDO)translationMasters[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, base.GetLanguage(translationMasters));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return translationMasters;
		}

		/// <summary>
		/// Purpose: Create a TranslationMaster record in the database
		/// </summary>
		/// <returns>Returns a TranslationMaster by reference with its new primary key</returns>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override TranslationMasterDO CreateTranslationMaster(TranslationMasterDO translationMasterDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationMasterDO)) {
				translationMasterDO = base.CreateTranslationMaster(translationMasterDO);
			}
			return translationMasterDO;
		}

		/// <summary>
		/// Purpose: Retrieves a TranslationMaster record by (Translation_Master_ID)
		/// </summary>
		/// <returns>Returns a TranslationMaster Data Object by reference</returns>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override TranslationMasterDO ReadTranslationMaster(TranslationMasterDO translationMasterDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationMasterDO)) {
				translationMasterDO = base.ReadTranslationMaster(translationMasterDO);
			}
			return translationMasterDO;
		}

		/// <summary>
		/// Purpose: Retrieves all TranslationMasters
		/// </summary>
		/// <returns>Returns a Collection of TranslationMasterDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadTranslationMastersAll(DataTransferObject dataTransferObject) {
			ICollection translationMasters = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				translationMasters = base.ReadTranslationMastersAll(dataTransferObject);
			}
			return translationMasters;
		}

		/// <summary>
		/// Purpose: Retrieves all TranslationMasters for a list control
		/// </summary>
		/// <returns>Returns a Collection of ListItem Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadTranslationMastersAllList(DataTransferObject dataTransferObject) {
			ICollection translationMasters = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				translationMasters = base.ReadTranslationMastersAllList(dataTransferObject);
			}
			return translationMasters;
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData TranslationMasters by page
		/// </summary>
		/// <returns>Returns a Collection of TranslationMasterDO Data Objects in a ICollection</returns>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override ICollection ReadTranslationMastersByPage(TranslationMasterDO translationMasterDO) {
			ICollection translationMasters = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationMasterDO)) {
				translationMasters = base.ReadTranslationMastersByPage(translationMasterDO);
			}
			return translationMasters;
		}

		/// <summary>
		/// Purpose: Update TranslationMaster records in the database
		/// </summary>
		/// <param name = "translationMasters">IList translationMasters.</param>
		public void UpdateTranslationMasters(IList translationMasters) {
			if (translationMasters != null) {
				if (translationMasters.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationMasters.Count; i++) {
							this.UpdateTranslationMaster((TranslationMasterDO)translationMasters[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_UPDATE, base.GetLanguage(translationMasters), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateTranslationMaster((TranslationMasterDO)translationMasters[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_UPDATE, base.GetLanguage(translationMasters));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

//		/// <summary>
//		/// Purpose: Update records in TranslationMaster table.
//		/// </summary>
//		/// <param name = translationMasters>ICollection translationMasters</param>
//		public override void UpdateTranslationMasters(ICollection translationMasters) {
//			base.UpdateTranslationMasters(translationMasters);
//		}
		/// <summary>
		/// Purpose: Update a TranslationMaster record in the database
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override void UpdateTranslationMaster(TranslationMasterDO translationMasterDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationMasterDO)) {
				base.UpdateTranslationMaster(translationMasterDO);
			}
		}

		/// <summary>
		/// Purpose: Delete TranslationMaster records in the database
		/// </summary>
		/// <param name = "translationMasters">IList translationMasters.</param>
		public void DeleteTranslationMasters(IList translationMasters) {
			if (translationMasters != null) {
				if (translationMasters.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < translationMasters.Count; i++) {
							this.DeleteTranslationMaster((TranslationMasterDO)translationMasters[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_DELETE, base.GetLanguage(translationMasters), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteTranslationMaster((TranslationMasterDO)translationMasters[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_DELETE, base.GetLanguage(translationMasters));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a TranslationMaster record in the database
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override void DeleteTranslationMaster(TranslationMasterDO translationMasterDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, translationMasterDO)) {
				base.DeleteTranslationMaster(translationMasterDO);
			}
		}

	}
}
