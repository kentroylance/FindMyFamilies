///////////////////////////////////////////////////////////////////////////
// Description: Business Object class for the 'App_Settings'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Collections;
using System.EnterpriseServices;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.Transactions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.BusinessObject {

	/// <summary>
	/// Purpose: Business Object class for AppSettings
	/// </summary>
	public class AppSettingsBO : FindMyFamilies.BusinessObject.AppSettingsBOBase {
		// Constant Declarations

		private static readonly object logCategory = MethodBase.GetCurrentMethod().DeclaringType;

		// Property Declarations

		// Property Getters/Setters

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AppSettingsBO() : base() {
		}

		/// <summary>
		/// Purpose: Create AppSettings records in the database
		/// </summary>
		/// <returns>Returns a list of AppSettingss by reference with their new primary key</returns>
		/// <param name = "appSettingss">IList appSettingss.</param>
		public ICollection CreateAppSettingss(IList appSettingss) {
			if (appSettingss != null) {
				if (appSettingss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < appSettingss.Count; i++) {
							this.CreateAppSettings((AppSettingsDO)appSettingss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_CREATE, base.GetLanguage(appSettingss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.CreateAppSettings((AppSettingsDO)appSettingss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_CREATE, base.GetLanguage(appSettingss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
			return appSettingss;
		}

		/// <summary>
		/// Purpose: Create a AppSettings record in the database
		/// </summary>
		/// <returns>Returns a AppSettings by reference with its new primary key</returns>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public override AppSettingsDO CreateAppSettings(AppSettingsDO appSettingsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, appSettingsDO)) {
				appSettingsDO = base.CreateAppSettings(appSettingsDO);
			}
			return appSettingsDO;
		}

		/// <summary>
		/// Purpose: Retrieves a AppSettings record by (App_Settings_ID)
		/// </summary>
		/// <returns>Returns a AppSettings Data Object by reference</returns>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public override AppSettingsDO ReadAppSettings(AppSettingsDO appSettingsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, appSettingsDO)) {
				appSettingsDO = base.ReadAppSettings(appSettingsDO);
			}
			return appSettingsDO;
		}

		/// <summary>
		/// Purpose: Retrieves all AppSettingss
		/// </summary>
		/// <returns>Returns a Collection of AppSettingsDO Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadAppSettingssAll(DataTransferObject dataTransferObject) {
			ICollection appSettingss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				appSettingss = base.ReadAppSettingssAll(dataTransferObject);
			}
			return appSettingss;
		}

		/// <summary>
		/// Purpose: Retrieves all AppSettingss for a list control
		/// </summary>
		/// <returns>Returns a Collection of ListItem Data Objects in a ICollection</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadAppSettingssAllList(DataTransferObject dataTransferObject) {
			ICollection appSettingss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, dataTransferObject)) {
				appSettingss = base.ReadAppSettingssAllList(dataTransferObject);
			}
			return appSettingss;
		}

		/// <summary>
		/// Purpose: Retrieve AppSettingss by page
		/// </summary>
		/// <returns>Returns a Collection of AppSettingsDO Data Objects in a ICollection</returns>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public override ICollection ReadAppSettingssByPage(AppSettingsDO appSettingsDO) {
			ICollection appSettingss = new ArrayList();
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, appSettingsDO)) {
				appSettingss = base.ReadAppSettingssByPage(appSettingsDO);
			}
			return appSettingss;
		}

		/// <summary>
		/// Purpose: Update AppSettings records in the database
		/// </summary>
		/// <param name = "appSettingss">IList appSettingss.</param>
		public void UpdateAppSettingss(IList appSettingss) {
			if (appSettingss != null) {
				if (appSettingss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < appSettingss.Count; i++) {
							this.UpdateAppSettings((AppSettingsDO)appSettingss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_UPDATE, base.GetLanguage(appSettingss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.UpdateAppSettings((AppSettingsDO)appSettingss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_UPDATE, base.GetLanguage(appSettingss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Update records in AppSettings table.
		/// </summary>
		/// <param name = appSettingss>ICollection appSettingss</param>
		public override void UpdateAppSettingss(ICollection appSettingss) {
			base.UpdateAppSettingss(appSettingss);
		}
		/// <summary>
		/// Purpose: Update a AppSettings record in the database
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public override void UpdateAppSettings(AppSettingsDO appSettingsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, appSettingsDO)) {
				base.UpdateAppSettings(appSettingsDO);
			}
		}

		/// <summary>
		/// Purpose: Delete AppSettings records in the database
		/// </summary>
		/// <param name = "appSettingss">IList appSettingss.</param>
		public void DeleteAppSettingss(IList appSettingss) {
			if (appSettingss != null) {
				if (appSettingss.Count > 0) {
					TransactionContext context = TransactionContextFactory.GetContext(TransactionAffinity.Required);
					try {
						context.Enter();
						for (int i = 0; i < appSettingss.Count; i++) {
							this.DeleteAppSettings((AppSettingsDO)appSettingss[i]);
						}
						context.VoteCommit();
					} catch(Exception ex) {
						context.VoteRollback();
						string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_DELETE, base.GetLanguage(appSettingss), ex);
						throw new DataAccessException(errorMessage, ex, logCategory);
					} finally {
						context.Exit();
					}
				} else {
					this.DeleteAppSettings((AppSettingsDO)appSettingss[0]);
				}
			} else {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_DELETE, base.GetLanguage(appSettingss));
				throw new DataAccessException(errorMessage, null, logCategory);
			}
		}

		/// <summary>
		/// Purpose: Delete a AppSettings record in the database
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public override void DeleteAppSettings(AppSettingsDO appSettingsDO) {
			if (IsValid(this, MethodBase.GetCurrentMethod().Name, appSettingsDO)) {
				base.DeleteAppSettings(appSettingsDO);
			}
		}

	}
}
