///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the 'Translation_Master'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;


using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.DataAccess {
	/// <summary>
	/// Purpose: Data Access class for the 'Translation_Master'.
	/// </summary>
	public class TranslationMasterDAO : TranslationMasterDAOBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;
		// Stored Procedure Name Constants
   		public const string READ_ALL_DETAIL = "ReadAllTranslationMasterDetails";
		public const string READ_BY_NAME_LANGUAGE = "ReadTranslationMastersByNameLanguage";
		public const string READ_TRANSLATION_MASTER_BY_TYPE = "ReadTranslationMasterByType";
		public const string READ_TRANSLATION_MASTER_BYDISPLAYNAME = "ReadTranslationMasterByDisplayName";

   		// Error Message Constants
		public const string ERROR_READ_TRANSLATION_MASTER_BY_TYPE = "ErrorReadTranslationMasterByType";

        // Field Name Constants

		/// <summary>
		/// Purpose: Base Class constructor.
		/// </summary>
		public TranslationMasterDAO() : base() {
		}

		/// <summary>
		/// Purpose: Creates a new record in Translation_Master table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO</param>
		public override TranslationMasterDO CreateTranslationMaster(TranslationMasterDO translationMasterDO) {
			return base.CreateTranslationMaster(translationMasterDO);
		}

		/// <summary>
		/// Purpose: Update a record in Translation_Master.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO</param>
		public override void UpdateTranslationMaster(TranslationMasterDO translationMasterDO) {
			base.UpdateTranslationMaster(translationMasterDO);
		}

		/// <summary>
		/// Purpose: Delete a record in Translation_Master.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMaster</param>
		public override void DeleteTranslationMaster(TranslationMasterDO translationMasterDO) {
			base.DeleteTranslationMaster(translationMasterDO);
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData a record in Translation_Master table by primary key.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public override TranslationMasterDO ReadTranslationMaster(TranslationMasterDO translationMasterDO) {
			return base.ReadTranslationMaster(translationMasterDO);
		}

		/// <summary>
		/// Purpose: Retrieves all records in Translation_Master table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public override ICollection ReadTranslationMastersAll(DataTransferObject dataTransferObject) {
			return base.ReadTranslationMastersAll(dataTransferObject);
		}

		/// <summary>
		/// Purpose: Retrieves all records from Translation_Master table for populating a list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public override ICollection ReadTranslationMastersAllList(DataTransferObject dataTransferObject) {
			return base.ReadTranslationMastersAllList(dataTransferObject);
		}

		/// <summary>
		/// Purpose: Reads a page of records from table Translation_Master by search criteria.
		/// </summary>
		/// <returns>Returns a collection of TranslationMasters</returns>
		public virtual ICollection ReadTranslationMastersByPage(TranslationMasterDO translationMasterDO) {
			IList translationMasters = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(PagingDO.READ_BY_PAGE);
				command.SetParameter(PagingDO.PAGING_TABLE_NAME, TABLE_NAME);
				command.SetParameter(PagingDO.PAGING_PRIMARY_KEY, TranslationMasterDAO.TRANSLATION_MASTER_ID);
				command.SetParameter(PagingDO.PAGING_FIELDS, "*");
				command.SetParameter(PagingDO.PAGING_ORDER, TranslationMasterDAO.TRANSLATION_MASTER_ID);
				command.SetParameter(PagingDO.PAGING_PAGE_SIZE, translationMasterDO.Paging.PageSize);
				command.SetParameter(PagingDO.PAGING_PAGE_INDEX, translationMasterDO.Paging.PageIndex);
				command.SetParameter(PagingDO.PAGING_FILTER, TranslationMasterDAO.TRANSLATION_MASTER_ID + " > 1");
				command.SetParameter(LANGUAGE, translationMasterDO.Language);
				reader = command.ExecuteReader();
		
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					translationMasters.Add(this.MapToDataTransferObject(reader));
				}
				if (reader.NextResult()) {
					reader.Read();
					if (translationMasters.Count < 1) {
						translationMasters.Add(new TranslationMasterDO());
					}
					((TranslationMasterDO)translationMasters[0]).Paging.TotalRecords = reader.GetInt32(0);
				}
				ProcessResult(reader, translationMasterDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_READ_BY_PAGE, translationMasterDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasters;
		}

        		/// <summary>
		/// Purpose: Reads all the records from the Translation_Master table.
		/// </summary>
		/// <returns>Returns a collection of TranslationMaster Data Objects</returns>
		/// <param name = "translationMaster">TranslationMasterDO translationMaster</param>
		public ICollection ReadTranslationMastersByNameLanguage(TranslationMasterDO translationMaster) {
			IList translationMasters = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, translationMaster.Language);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_NAME, translationMaster.TranslationMasterName);
//				this.Close();
				reader = command.ExecuteReader();
				int totalRecords = 0;
				string[,] translations;
				if (reader.Read()) {
					totalRecords = reader.GetInt32(0);
				}
				if (reader.NextResult()) {
					translations = new string[totalRecords,2];
					for (int i = 0; i < totalRecords; i++) {
						reader.Read();
						translations[i, 1] = (string) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_KEY);
						translations[i, 0] = (string) GetValue(reader, TranslationDAO.TRANSLATION_TEXT);
					}
					translationMasters.Add(translations);
				}

				ProcessResult(reader, translationMaster, logCategory);
			} catch (Exception ex) {
				//Resource.GetErrorMessage(Radixware.Data.MessageKeys.TRANSLATIONMASTER_READ_ALL, translationMaster.Language);
				throw new DataAccessException(ex.Message, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasters;
		}

		private TranslationDO GetTranslation(IDataReader reader) {
			TranslationDO translation = new TranslationDO();
			translation.TranslationDetailID = (int) GetValue(reader, TranslationDAO.TRANSLATION_DETAIL_ID);
			translation.TranslationID = (int) GetValue(reader, TranslationDAO.TRANSLATION_ID);
			translation.LanguageID = (string) GetValue(reader, TranslationDAO.LANGUAGE_ID);
			translation.TranslationText = (string) GetValue(reader, TranslationDAO.TRANSLATION_TEXT);
			return translation;
		}

		private TranslationDetailDO GetDetail(IDataReader reader) {
			TranslationDetailDO translationDetail = new TranslationDetailDO();
			translationDetail.TranslationDetailDescription = (string) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_DESCRIPTION);
			translationDetail.TranslationDetailID = (int) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_ID);
			translationDetail.TranslationDetailKey = (string) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_KEY);
			translationDetail.TranslationDetailType = (string) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_TYPE);
			translationDetail.TranslationMasterID = (int) GetValue(reader, TranslationDetailDAO.TRANSLATION_MASTER_ID);
			return translationDetail;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation_Master table.
		/// </summary>
		/// <returns>Returns a collection of TranslationMaster Data Objects</returns>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public ICollection ReadTranslationMasterDetailsAll(DataTransferObject dataTransferObject) {
			IList translationMasters = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL_DETAIL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				//this.Close();
				reader = command.ExecuteReader();
				int masterID = -1;
				int detailID = -1;
				TranslationMasterDO master = null;
				TranslationDetailDO detail = null;
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					//TranslationMaster.TranslationMasterID = (int)GetValue(reader, TRANSLATION_MASTER_ID);
					if (masterID != (int) GetValue(reader, TranslationMasterDAO.TRANSLATION_MASTER_ID)) {
						if (masterID != -1) {
//							master.Details.Add(detail);
							translationMasters.Add(master);
						}
						master = new TranslationMasterDO();
						master.TranslationMasterID = (int) GetValue(reader, TranslationMasterDAO.TRANSLATION_MASTER_ID);
						masterID = master.TranslationMasterID;
						master.TranslationMasterDescription = (string) GetValue(reader, TranslationMasterDAO.TRANSLATION_MASTER_DESCRIPTION);
						master.TranslationMasterName = (string) GetValue(reader, TranslationMasterDAO.TRANSLATION_MASTER_NAME);
						master.TranslationMasterType = (string) GetValue(reader, TranslationMasterDAO.TRANSLATION_MASTER_TYPE);
						detail = GetDetail(reader);
						detailID = detail.TranslationDetailID; //(int)GetValue(reader, TranslationDAO.TRANSLATION_DETAIL_ID);
					} else if (detailID != (int) GetValue(reader, TranslationDetailDAO.TRANSLATION_DETAIL_ID)) {
						if (detailID != -1) {
//							master.Details.Add(detail);
						}
						detail = GetDetail(reader);
						detailID = detail.TranslationDetailID; //(int)GetValue(reader, TranslationDAO.TRANSLATION_DETAIL_ID);
					}
//					detail.Translations.Add(GetTranslation(reader));
				}
//				master.Details.Add(detail);
				translationMasters.Add(master);
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_READ, dataTransferObject.Language);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasters;
		}

		public ICollection ReadTranslationMasterByType(TranslationMasterDO translationMaster) {
			IList translationMasters = new ArrayList();

			translationMaster.Paging.PageSize = 0;
			translationMaster.Paging.Fields = TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_ID + ","
				+ TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_NAME;
			translationMaster.Paging.Filter = TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_TYPE + "=" + translationMaster.TranslationMasterType;

			translationMasters = (IList) ReadTranslationMastersByPage(translationMaster);
			return translationMasters;
		}

		public TranslationMasterDO ReadTranslationMasterByDisplayName(TranslationMasterDO translationMaster) {
			IList translationMasters = new ArrayList();

			translationMaster.Paging.PageSize = 0;

			translationMaster.Paging.Fields = TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_ID + ","
				+ TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_NAME;

			translationMaster.Paging.Filter = TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_NAME + "=" + translationMaster.TranslationMasterName +
				" AND " + TranslationMasterDAO.TABLE_NAME + "." + TranslationMasterDAO.TRANSLATION_MASTER_TYPE + "=" + translationMaster.TranslationMasterType;

			translationMasters = (IList) ReadTranslationMastersByPage(translationMaster);
			if (translationMasters.Count < 1) {
				return new TranslationMasterDO();
			}
			return (TranslationMasterDO) translationMasters[0];
		}
		/// <summary>
		/// Purpose: Creates records in Translation_Master table and returns the generated primary keys by reference.
		/// </summary>
		/// <param name = "translationMasters">ICollection translationMasters.</param>
		public virtual ICollection CreateTranslationMasters(ICollection translationMasters) {
			if (translationMasters.Count > 0) {
				TranslationMasterDO translationMasterDO = null;
				try {
					//Database.BeginTransaction();
					IEnumerator enumerator = null;
					if (translationMasters is IList) {
						enumerator = translationMasters.GetEnumerator();
					} else if (translationMasters is IDictionary) {
						enumerator = ((IDictionary)translationMasters).Values.GetEnumerator();
					}
					while (enumerator.MoveNext()) {
						translationMasterDO = (TranslationMasterDO)enumerator.Current;
						this.CreateTranslationMaster(translationMasterDO);
					}
					//Database.CommitTransaction();
				} catch(Exception ex) {
					//Database.RollbackTransaction(false);
					string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, translationMasterDO.Language, ex);
					throw new DataAccessException(errorMessage, ex, logCategory);
				}
			}
			return translationMasters;
		}
		/// <summary>
		/// Purpose: Update records in the Translation_Master table.
		/// </summary>
		/// <param name = "translationMasters">ICollection translationMasters.</param>
		public virtual void UpdateTranslationMasters(ICollection translationMasters) {
			if (translationMasters.Count > 0) {
				TranslationMasterDO translationMasterDO = null;
				try {
					//BeginTransaction();
					IEnumerator enumerator = null;
					if (translationMasters is IList) {
						enumerator = translationMasters.GetEnumerator();
					} else if (translationMasters is IDictionary) {
						enumerator = ((IDictionary)translationMasters).Values.GetEnumerator();
					}
					while (enumerator.MoveNext()) {
						translationMasterDO = (TranslationMasterDO)enumerator.Current;
						this.UpdateTranslationMaster(translationMasterDO);
					}
					//CommitTransaction();
				} catch(Exception ex) {
					//RollBackTransaction(false);
					string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, translationMasterDO.Language, ex);
					throw new DataAccessException(errorMessage, ex, logCategory);
				}
			}
		}
		/// <summary>
		/// Purpose: Delete records in the Translation_Master table.
		/// </summary>
		/// <param name = "translationMasters">ICollection translationMasters.</param>
		public virtual void DeleteTranslationMasters(ICollection translationMasters) {
			if (translationMasters.Count > 0) {
				TranslationMasterDO translationMasterDO = null;
				try {
					//BeginTransaction();
					IEnumerator enumerator = null;
					if (translationMasters is IList) {
						enumerator = translationMasters.GetEnumerator();
					} else if (translationMasters is IDictionary) {
						enumerator = ((IDictionary)translationMasters).Values.GetEnumerator();
					}
					while (enumerator.MoveNext()) {
						translationMasterDO = (TranslationMasterDO)enumerator.Current;
						this.DeleteTranslationMaster(translationMasterDO);
					}
					//CommitTransaction();
				} catch(Exception ex) {
					//RollBackTransaction(false);
					string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, translationMasterDO.Language, ex);
					throw new DataAccessException(errorMessage, ex, logCategory);
				}
			}
		}
	}
}
