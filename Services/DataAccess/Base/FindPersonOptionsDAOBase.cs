///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Find_Person_Options'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Find_Person_Options'.
	/// </summary>
	public class FindPersonOptionsDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "FIND_PERSON_OPTIONS";
		public const string TABLE_NAME_KEY = "Find_Person_Options_SEQ";

		public const string CREATE = "CreateFindPersonOptions";
		public const string UPDATE = "UpdateFindPersonOptions";
		public const string DELETE = "DeleteFindPersonOptions";
		public const string DELETE_ALL = "DeleteAllFindPersonOptionss";
		public const string READ = "ReadFindPersonOptions";
		public const string READ_ALL = "ReadAllFindPersonOptionss";

		// Field Name Constants
		public const string FIND_PERSON_OPTIONS_ID = "find_person_options_id";
		public const string DATE_CREATED = "date_created";
		public const string PERSON_ID = "person_id";
		public const string OPTION_CODE = "option_code";
		public const string OPTION_DESCRIPTION = "option_description";
		public const string OPTION_ORDER = "option_order";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public FindPersonOptionsDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the FindPersonOptions data object
		/// </summary>
		/// <returns>FindPersonOptions data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual FindPersonOptionsDO MapToDataTransferObject(IDataReader reader) {
			FindPersonOptionsDO findPersonOptionsDO = new FindPersonOptionsDO();
			findPersonOptionsDO.FindPersonOptionsID = (int)GetValue(reader, FIND_PERSON_OPTIONS_ID);
			findPersonOptionsDO.DateCreated = (DateTime)GetValue(reader, DATE_CREATED);
			findPersonOptionsDO.PersonID = (string)GetValue(reader, PERSON_ID);
			findPersonOptionsDO.OptionCode = (string)GetValue(reader, OPTION_CODE);
			findPersonOptionsDO.OptionDescription = (string)GetValue(reader, OPTION_DESCRIPTION);
			findPersonOptionsDO.OptionOrder = (string)GetValue(reader, OPTION_ORDER);
			findPersonOptionsDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			findPersonOptionsDO.GenerateNextID = false;
			return findPersonOptionsDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Find_Person_Options table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO</param>
		public virtual FindPersonOptionsDO CreateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(FindPersonOptionsDAO.DATE_CREATED, findPersonOptionsDO.DateCreated);
				command.SetParameter(FindPersonOptionsDAO.PERSON_ID, findPersonOptionsDO.PersonID);
				command.SetParameter(FindPersonOptionsDAO.OPTION_CODE, findPersonOptionsDO.OptionCode);
				command.SetParameter(FindPersonOptionsDAO.OPTION_DESCRIPTION, findPersonOptionsDO.OptionDescription);
				command.SetParameter(FindPersonOptionsDAO.OPTION_ORDER, findPersonOptionsDO.OptionOrder);
				command.SetParameter(FindPersonOptionsDAO.LANGUAGE, findPersonOptionsDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					findPersonOptionsDO.FindPersonOptionsID = reader.GetInt32(0);
				}
				ProcessResult(reader, findPersonOptionsDO.FindPersonOptionsID, findPersonOptionsDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_CREATE, findPersonOptionsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return findPersonOptionsDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Find_Person_Options table.
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public virtual void UpdateFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(FindPersonOptionsDAO.FIND_PERSON_OPTIONS_ID, findPersonOptionsDO.FindPersonOptionsID);
				command.SetParameter(FindPersonOptionsDAO.DATE_CREATED, findPersonOptionsDO.DateCreated);
				command.SetParameter(FindPersonOptionsDAO.PERSON_ID, findPersonOptionsDO.PersonID);
				command.SetParameter(FindPersonOptionsDAO.OPTION_CODE, findPersonOptionsDO.OptionCode);
				command.SetParameter(FindPersonOptionsDAO.OPTION_DESCRIPTION, findPersonOptionsDO.OptionDescription);
				command.SetParameter(FindPersonOptionsDAO.OPTION_ORDER, findPersonOptionsDO.OptionOrder);
				command.SetParameter(FindPersonOptionsDAO.LANGUAGE, findPersonOptionsDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, findPersonOptionsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_UPDATE, findPersonOptionsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Find_Person_Options table
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public virtual void DeleteFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(FindPersonOptionsDAO.FIND_PERSON_OPTIONS_ID, findPersonOptionsDO.FindPersonOptionsID);
				reader = command.ExecuteReader();
				ProcessResult(reader, findPersonOptionsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_DELETE, findPersonOptionsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Find_Person_Options table.
		/// </summary>
		/// <param name = "findPersonOptionsDO">FindPersonOptionsDO findPersonOptionsDO.</param>
		public virtual FindPersonOptionsDO ReadFindPersonOptions(FindPersonOptionsDO findPersonOptionsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(FindPersonOptionsDAO.FIND_PERSON_OPTIONS_ID, findPersonOptionsDO.FindPersonOptionsID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				findPersonOptionsDO = new FindPersonOptionsDO();
				if (reader.Read()) {
					findPersonOptionsDO.FindPersonOptionsID = (int)GetValue(reader, FIND_PERSON_OPTIONS_ID);
					findPersonOptionsDO.DateCreated = (DateTime)GetValue(reader, DATE_CREATED);
					findPersonOptionsDO.PersonID = (string)GetValue(reader, PERSON_ID);
					findPersonOptionsDO.OptionCode = (string)GetValue(reader, OPTION_CODE);
					findPersonOptionsDO.OptionDescription = (string)GetValue(reader, OPTION_DESCRIPTION);
					findPersonOptionsDO.OptionOrder = (string)GetValue(reader, OPTION_ORDER);
					findPersonOptionsDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, findPersonOptionsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_READ, findPersonOptionsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return findPersonOptionsDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Find_Person_Options table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadFindPersonOptionssAll(DataTransferObject dataTransferObject) {
			IList findPersonOptionss = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					findPersonOptionss.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.FIND_PERSON_OPTIONS_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return findPersonOptionss;
		}

	}
}
