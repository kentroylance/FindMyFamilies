///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Address'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Address'.
	/// </summary>
	public class AddressDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "ADDRESS";
		public const string TABLE_NAME_KEY = "Address_SEQ";

		public const string CREATE = "CreateAddress";
		public const string UPDATE = "UpdateAddress";
		public const string DELETE = "DeleteAddress";
		public const string DELETE_ALL = "DeleteAllAddresss";
		public const string READ = "ReadAddress";
		public const string READ_ALL = "ReadAllAddresss";

		// Field Name Constants
		public const string ADDRESS_ID = "address_id";
		public const string ASSOCIATED_ID = "associated_id";
		public const string ADDRESS_TYPE = "address_type";
		public const string ADDRESS_STATUS = "address_status";
		public const string ADDRESS_LINE1 = "address_line1";
		public const string ADDRESS_LINE2 = "address_line2";
		public const string ADDRESS_LINE3 = "address_line3";
		public const string CITY = "city";
		public const string STATE = "state";
		public const string ZIP_CODE = "zip_code";
		public const string COUNTRY = "country";
		public const string DAY_PHONE = "day_phone";
		public const string NIGHT_PHONE = "night_phone";
		public const string CELL_PHONE = "cell_phone";
		public const string FAX_NUMBER = "fax_number";
		public const string REGION = "region";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AddressDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the Address data object
		/// </summary>
		/// <returns>Address data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual AddressDO MapToDataTransferObject(IDataReader reader) {
			AddressDO addressDO = new AddressDO();
			addressDO.AddressID = (int)GetValue(reader, ADDRESS_ID);
			addressDO.AssociatedID = (int)GetValue(reader, ASSOCIATED_ID);
			addressDO.AddressType = (string)GetValue(reader, ADDRESS_TYPE);
			addressDO.AddressStatus = (string)GetValue(reader, ADDRESS_STATUS);
			addressDO.AddressLine1 = (string)GetValue(reader, ADDRESS_LINE1);
			addressDO.AddressLine2 = (string)GetValue(reader, ADDRESS_LINE2);
			addressDO.AddressLine3 = (string)GetValue(reader, ADDRESS_LINE3);
			addressDO.City = (string)GetValue(reader, CITY);
			addressDO.State = (string)GetValue(reader, STATE);
			addressDO.ZipCode = (string)GetValue(reader, ZIP_CODE);
			addressDO.Country = (string)GetValue(reader, COUNTRY);
			addressDO.DayPhone = (string)GetValue(reader, DAY_PHONE);
			addressDO.NightPhone = (string)GetValue(reader, NIGHT_PHONE);
			addressDO.CellPhone = (string)GetValue(reader, CELL_PHONE);
			addressDO.FaxNumber = (string)GetValue(reader, FAX_NUMBER);
			addressDO.Region = (string)GetValue(reader, REGION);
			addressDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			addressDO.GenerateNextID = false;
			return addressDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Address table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public virtual AddressDO CreateAddress(AddressDO addressDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(AddressDAO.ASSOCIATED_ID, addressDO.AssociatedID);
				command.SetParameter(AddressDAO.ADDRESS_TYPE, addressDO.AddressType);
				command.SetParameter(AddressDAO.ADDRESS_STATUS, addressDO.AddressStatus);
				command.SetParameter(AddressDAO.ADDRESS_LINE1, addressDO.AddressLine1);
				command.SetParameter(AddressDAO.ADDRESS_LINE2, addressDO.AddressLine2);
				command.SetParameter(AddressDAO.ADDRESS_LINE3, addressDO.AddressLine3);
				command.SetParameter(AddressDAO.CITY, addressDO.City);
				command.SetParameter(AddressDAO.STATE, addressDO.State);
				command.SetParameter(AddressDAO.ZIP_CODE, addressDO.ZipCode);
				command.SetParameter(AddressDAO.COUNTRY, addressDO.Country);
				command.SetParameter(AddressDAO.DAY_PHONE, addressDO.DayPhone);
				command.SetParameter(AddressDAO.NIGHT_PHONE, addressDO.NightPhone);
				command.SetParameter(AddressDAO.CELL_PHONE, addressDO.CellPhone);
				command.SetParameter(AddressDAO.FAX_NUMBER, addressDO.FaxNumber);
				command.SetParameter(AddressDAO.REGION, addressDO.Region);
				command.SetParameter(AddressDAO.LANGUAGE, addressDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					addressDO.AddressID = reader.GetInt32(0);
				}
				ProcessResult(reader, addressDO.AddressID, addressDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_CREATE, addressDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return addressDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Address table.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public virtual void UpdateAddress(AddressDO addressDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(AddressDAO.ADDRESS_ID, addressDO.AddressID);
				command.SetParameter(AddressDAO.ASSOCIATED_ID, addressDO.AssociatedID);
				command.SetParameter(AddressDAO.ADDRESS_TYPE, addressDO.AddressType);
				command.SetParameter(AddressDAO.ADDRESS_STATUS, addressDO.AddressStatus);
				command.SetParameter(AddressDAO.ADDRESS_LINE1, addressDO.AddressLine1);
				command.SetParameter(AddressDAO.ADDRESS_LINE2, addressDO.AddressLine2);
				command.SetParameter(AddressDAO.ADDRESS_LINE3, addressDO.AddressLine3);
				command.SetParameter(AddressDAO.CITY, addressDO.City);
				command.SetParameter(AddressDAO.STATE, addressDO.State);
				command.SetParameter(AddressDAO.ZIP_CODE, addressDO.ZipCode);
				command.SetParameter(AddressDAO.COUNTRY, addressDO.Country);
				command.SetParameter(AddressDAO.DAY_PHONE, addressDO.DayPhone);
				command.SetParameter(AddressDAO.NIGHT_PHONE, addressDO.NightPhone);
				command.SetParameter(AddressDAO.CELL_PHONE, addressDO.CellPhone);
				command.SetParameter(AddressDAO.FAX_NUMBER, addressDO.FaxNumber);
				command.SetParameter(AddressDAO.REGION, addressDO.Region);
				command.SetParameter(AddressDAO.LANGUAGE, addressDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, addressDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_UPDATE, addressDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Address table
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public virtual void DeleteAddress(AddressDO addressDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(AddressDAO.ADDRESS_ID, addressDO.AddressID);
				reader = command.ExecuteReader();
				ProcessResult(reader, addressDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_DELETE, addressDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Address table.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public virtual AddressDO ReadAddress(AddressDO addressDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(AddressDAO.ADDRESS_ID, addressDO.AddressID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				addressDO = new AddressDO();
				if (reader.Read()) {
					addressDO.AddressID = (int)GetValue(reader, ADDRESS_ID);
					addressDO.AssociatedID = (int)GetValue(reader, ASSOCIATED_ID);
					addressDO.AddressType = (string)GetValue(reader, ADDRESS_TYPE);
					addressDO.AddressStatus = (string)GetValue(reader, ADDRESS_STATUS);
					addressDO.AddressLine1 = (string)GetValue(reader, ADDRESS_LINE1);
					addressDO.AddressLine2 = (string)GetValue(reader, ADDRESS_LINE2);
					addressDO.AddressLine3 = (string)GetValue(reader, ADDRESS_LINE3);
					addressDO.City = (string)GetValue(reader, CITY);
					addressDO.State = (string)GetValue(reader, STATE);
					addressDO.ZipCode = (string)GetValue(reader, ZIP_CODE);
					addressDO.Country = (string)GetValue(reader, COUNTRY);
					addressDO.DayPhone = (string)GetValue(reader, DAY_PHONE);
					addressDO.NightPhone = (string)GetValue(reader, NIGHT_PHONE);
					addressDO.CellPhone = (string)GetValue(reader, CELL_PHONE);
					addressDO.FaxNumber = (string)GetValue(reader, FAX_NUMBER);
					addressDO.Region = (string)GetValue(reader, REGION);
					addressDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, addressDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_READ, addressDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return addressDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Address table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadAddresssAll(DataTransferObject dataTransferObject) {
			IList addresss = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					addresss.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return addresss;
		}

	}
}
