///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Member'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Member'.
	/// </summary>
	public class MemberDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "MEMBER";
		public const string TABLE_NAME_KEY = "Member_SEQ";

		public const string CREATE = "CreateMember";
		public const string UPDATE = "UpdateMember";
		public const string DELETE = "DeleteMember";
		public const string DELETE_ALL = "DeleteAllMembers";
		public const string READ = "ReadMember";
		public const string READ_ALL = "ReadAllMembers";

		// Field Name Constants
		public const string MEMBER_ID = "member_id";
		public const string PERSON_ID = "person_id";
		public const string MAILING_ADDRESS_ID = "mailing_address_id";
		public const string MEMBER_TYPE = "member_type";
		public const string MEMBER_STATUS = "member_status";
		public const string FIRSTNAME = "firstname";
		public const string MIDDLENAME = "middlename";
		public const string LASTNAME = "lastname";
		public const string EMAIL = "email";
		public const string BIRTH_DATE = "birth_date";
		public const string PASSWORD = "password";
		public const string DATE_CREATED = "date_created";
		public const string DISPLAY_NAME = "display_name";
		public const string NOTES = "notes";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public MemberDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the Member data object
		/// </summary>
		/// <returns>Member data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual MemberDO MapToDataTransferObject(IDataReader reader) {
			MemberDO memberDO = new MemberDO();
			memberDO.MemberID = (int)GetValue(reader, MEMBER_ID);
			memberDO.PersonID = (string)GetValue(reader, PERSON_ID);
			memberDO.MailingAddressID = (int)GetValue(reader, MAILING_ADDRESS_ID);
			memberDO.MemberType = (string)GetValue(reader, MEMBER_TYPE);
			memberDO.MemberStatus = (string)GetValue(reader, MEMBER_STATUS);
			memberDO.Firstname = (string)GetValue(reader, FIRSTNAME);
			memberDO.Middlename = (string)GetValue(reader, MIDDLENAME);
			memberDO.Lastname = (string)GetValue(reader, LASTNAME);
			memberDO.Email = (string)GetValue(reader, EMAIL);
			memberDO.BirthDate = (DateTime)GetValue(reader, BIRTH_DATE);
			memberDO.Password = (string)GetValue(reader, PASSWORD);
			memberDO.DateCreated = (DateTime)GetValue(reader, DATE_CREATED);
			memberDO.DisplayName = (string)GetValue(reader, DISPLAY_NAME);
			memberDO.Notes = (string)GetValue(reader, NOTES);
			memberDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			memberDO.GenerateNextID = false;
			return memberDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Member table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO</param>
		public virtual MemberDO CreateMember(MemberDO memberDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(MemberDAO.PERSON_ID, memberDO.PersonID);
				command.SetParameter(MemberDAO.MAILING_ADDRESS_ID, memberDO.MailingAddressID);
				command.SetParameter(MemberDAO.MEMBER_TYPE, memberDO.MemberType);
				command.SetParameter(MemberDAO.MEMBER_STATUS, memberDO.MemberStatus);
				command.SetParameter(MemberDAO.FIRSTNAME, memberDO.Firstname);
				command.SetParameter(MemberDAO.MIDDLENAME, memberDO.Middlename);
				command.SetParameter(MemberDAO.LASTNAME, memberDO.Lastname);
				command.SetParameter(MemberDAO.EMAIL, memberDO.Email);
				command.SetParameter(MemberDAO.BIRTH_DATE, memberDO.BirthDate);
				command.SetParameter(MemberDAO.PASSWORD, memberDO.Password);
				command.SetParameter(MemberDAO.DATE_CREATED, memberDO.DateCreated);
				command.SetParameter(MemberDAO.DISPLAY_NAME, memberDO.DisplayName);
				command.SetParameter(MemberDAO.NOTES, memberDO.Notes);
				command.SetParameter(MemberDAO.LANGUAGE, memberDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					memberDO.MemberID = reader.GetInt32(0);
				}
				ProcessResult(reader, memberDO.MemberID, memberDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_CREATE, memberDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return memberDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Member table.
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public virtual void UpdateMember(MemberDO memberDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(MemberDAO.MEMBER_ID, memberDO.MemberID);
				command.SetParameter(MemberDAO.PERSON_ID, memberDO.PersonID);
				command.SetParameter(MemberDAO.MAILING_ADDRESS_ID, memberDO.MailingAddressID);
				command.SetParameter(MemberDAO.MEMBER_TYPE, memberDO.MemberType);
				command.SetParameter(MemberDAO.MEMBER_STATUS, memberDO.MemberStatus);
				command.SetParameter(MemberDAO.FIRSTNAME, memberDO.Firstname);
				command.SetParameter(MemberDAO.MIDDLENAME, memberDO.Middlename);
				command.SetParameter(MemberDAO.LASTNAME, memberDO.Lastname);
				command.SetParameter(MemberDAO.EMAIL, memberDO.Email);
				command.SetParameter(MemberDAO.BIRTH_DATE, memberDO.BirthDate);
				command.SetParameter(MemberDAO.PASSWORD, memberDO.Password);
				command.SetParameter(MemberDAO.DATE_CREATED, memberDO.DateCreated);
				command.SetParameter(MemberDAO.DISPLAY_NAME, memberDO.DisplayName);
				command.SetParameter(MemberDAO.NOTES, memberDO.Notes);
				command.SetParameter(MemberDAO.LANGUAGE, memberDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, memberDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_UPDATE, memberDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Member table
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public virtual void DeleteMember(MemberDO memberDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(MemberDAO.MEMBER_ID, memberDO.MemberID);
				reader = command.ExecuteReader();
				ProcessResult(reader, memberDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_DELETE, memberDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Member table.
		/// </summary>
		/// <param name = "memberDO">MemberDO memberDO.</param>
		public virtual MemberDO ReadMember(MemberDO memberDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(MemberDAO.MEMBER_ID, memberDO.MemberID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				memberDO = new MemberDO();
				if (reader.Read()) {
					memberDO.MemberID = (int)GetValue(reader, MEMBER_ID);
					memberDO.PersonID = (string)GetValue(reader, PERSON_ID);
					memberDO.MailingAddressID = (int)GetValue(reader, MAILING_ADDRESS_ID);
					memberDO.MemberType = (string)GetValue(reader, MEMBER_TYPE);
					memberDO.MemberStatus = (string)GetValue(reader, MEMBER_STATUS);
					memberDO.Firstname = (string)GetValue(reader, FIRSTNAME);
					memberDO.Middlename = (string)GetValue(reader, MIDDLENAME);
					memberDO.Lastname = (string)GetValue(reader, LASTNAME);
					memberDO.Email = (string)GetValue(reader, EMAIL);
					memberDO.BirthDate = (DateTime)GetValue(reader, BIRTH_DATE);
					memberDO.Password = (string)GetValue(reader, PASSWORD);
					memberDO.DateCreated = (DateTime)GetValue(reader, DATE_CREATED);
					memberDO.DisplayName = (string)GetValue(reader, DISPLAY_NAME);
					memberDO.Notes = (string)GetValue(reader, NOTES);
					memberDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, memberDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_READ, memberDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return memberDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Member table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadMembersAll(DataTransferObject dataTransferObject) {
			IList members = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					members.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.MEMBER_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return members;
		}

	}
}
