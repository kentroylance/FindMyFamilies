///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Translation_Detail'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Translation_Detail'.
	/// </summary>
	public class TranslationDetailDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "TRANSLATION_DETAIL";
		public const string TABLE_NAME_KEY = "Translation_Detail_SEQ";

		public const string CREATE = "CreateTranslationDetail";
		public const string UPDATE = "UpdateTranslationDetail";
		public const string DELETE = "DeleteTranslationDetail";
		public const string DELETE_ALL = "DeleteAllTranslationDetails";
		public const string READ = "ReadTranslationDetail";
		public const string READ_ALL = "ReadAllTranslationDetails";

		// Field Name Constants
		public const string TRANSLATION_DETAIL_ID = "translation_detail_id";
		public const string TRANSLATION_DETAIL_DESCRIPTION = "translation_detail_description";
		public const string TRANSLATION_DETAIL_KEY = "translation_detail_key";
		public const string TRANSLATION_DETAIL_TYPE = "translation_detail_type";
		public const string TRANSLATION_MASTER_ID = "translation_master_id";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TranslationDetailDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the TranslationDetail data object
		/// </summary>
		/// <returns>TranslationDetail data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual TranslationDetailDO MapToDataTransferObject(IDataReader reader) {
			TranslationDetailDO translationDetailDO = new TranslationDetailDO();
			translationDetailDO.TranslationDetailID = (int)GetValue(reader, TRANSLATION_DETAIL_ID);
			translationDetailDO.TranslationDetailDescription = (string)GetValue(reader, TRANSLATION_DETAIL_DESCRIPTION);
			translationDetailDO.TranslationDetailKey = (string)GetValue(reader, TRANSLATION_DETAIL_KEY);
			translationDetailDO.TranslationDetailType = (string)GetValue(reader, TRANSLATION_DETAIL_TYPE);
			translationDetailDO.TranslationMasterID = (int)GetValue(reader, TRANSLATION_MASTER_ID);
			translationDetailDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			translationDetailDO.GenerateNextID = false;
			return translationDetailDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Translation_Detail table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO</param>
		public virtual TranslationDetailDO CreateTranslationDetail(TranslationDetailDO translationDetailDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_DESCRIPTION, translationDetailDO.TranslationDetailDescription);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_KEY, translationDetailDO.TranslationDetailKey);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_TYPE, translationDetailDO.TranslationDetailType);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_MASTER_ID, translationDetailDO.TranslationMasterID);
				command.SetParameter(TranslationDetailDAO.LANGUAGE, translationDetailDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					translationDetailDO.TranslationDetailID = reader.GetInt32(0);
				}
				ProcessResult(reader, translationDetailDO.TranslationDetailID, translationDetailDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_CREATE, translationDetailDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDetailDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Translation_Detail table.
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public virtual void UpdateTranslationDetail(TranslationDetailDO translationDetailDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_ID, translationDetailDO.TranslationDetailID);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_DESCRIPTION, translationDetailDO.TranslationDetailDescription);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_KEY, translationDetailDO.TranslationDetailKey);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_TYPE, translationDetailDO.TranslationDetailType);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_MASTER_ID, translationDetailDO.TranslationMasterID);
				command.SetParameter(TranslationDetailDAO.LANGUAGE, translationDetailDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationDetailDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_UPDATE, translationDetailDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Translation_Detail table
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public virtual void DeleteTranslationDetail(TranslationDetailDO translationDetailDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_ID, translationDetailDO.TranslationDetailID);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationDetailDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_DELETE, translationDetailDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Translation_Detail table.
		/// </summary>
		/// <param name = "translationDetailDO">TranslationDetailDO translationDetailDO.</param>
		public virtual TranslationDetailDO ReadTranslationDetail(TranslationDetailDO translationDetailDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(TranslationDetailDAO.TRANSLATION_DETAIL_ID, translationDetailDO.TranslationDetailID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				translationDetailDO = new TranslationDetailDO();
				if (reader.Read()) {
					translationDetailDO.TranslationDetailID = (int)GetValue(reader, TRANSLATION_DETAIL_ID);
					translationDetailDO.TranslationDetailDescription = (string)GetValue(reader, TRANSLATION_DETAIL_DESCRIPTION);
					translationDetailDO.TranslationDetailKey = (string)GetValue(reader, TRANSLATION_DETAIL_KEY);
					translationDetailDO.TranslationDetailType = (string)GetValue(reader, TRANSLATION_DETAIL_TYPE);
					translationDetailDO.TranslationMasterID = (int)GetValue(reader, TRANSLATION_MASTER_ID);
					translationDetailDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, translationDetailDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_READ, translationDetailDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDetailDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation_Detail table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadTranslationDetailsAll(DataTransferObject dataTransferObject) {
			IList translationDetails = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					translationDetails.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDetails;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation_Detail table to populate list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		/// <returns>Returns a collection of ListItem Data Objects</returns>
		public virtual ICollection ReadTranslationDetailsAllList(DataTransferObject dataTransferObject) {
			IList translationDetails = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				ListItemDO listItem = null;
				while (reader.Read()) {
					listItem = new ListItemDO();
					listItem.ValueMember = Convert.ToString(GetValue(reader, TranslationDetailDO.TRANSLATION_DETAIL_ID));
					listItem.DisplayMember = (string)GetValue(reader, TranslationDetailDO.TRANSLATION_DETAIL_KEY);
					translationDetails.Add(listItem);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_DETAIL_CANNOT_READ_ALL, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDetails;
		}

	}
}
