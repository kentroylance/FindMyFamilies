///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Next_ID'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Next_ID'.
	/// </summary>
	public class NextIDDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "NEXT_ID";
		public const string TABLE_NAME_KEY = "Next_Id_SEQ";

		public const string CREATE = "CreateNextID";
		public const string UPDATE = "UpdateNextID";
		public const string DELETE = "DeleteNextID";
		public const string DELETE_ALL = "DeleteAllNextIDs";
		public const string READ = "ReadNextID";
		public const string READ_ALL = "ReadAllNextIDs";

		// Field Name Constants
		public const string TABLE_ID = "table_id";
		public const string NEXT_VAL = "next_val";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public NextIDDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the NextID data object
		/// </summary>
		/// <returns>NextID data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual NextIDDO MapToDataTransferObject(IDataReader reader) {
			NextIDDO nextIDDO = new NextIDDO();
			nextIDDO.TableID = (string)GetValue(reader, TABLE_ID);
			nextIDDO.NextVal = (int)GetValue(reader, NEXT_VAL);
			nextIDDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			nextIDDO.GenerateNextID = false;
			return nextIDDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Next_ID table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO</param>
		public virtual NextIDDO CreateNextID(NextIDDO nextIDDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(NextIDDAO.NEXT_VAL, nextIDDO.NextVal);
				command.SetParameter(NextIDDAO.LANGUAGE, nextIDDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, nextIDDO.TableID, nextIDDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_CREATE, nextIDDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return nextIDDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Next_ID table.
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public virtual void UpdateNextID(NextIDDO nextIDDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(NextIDDAO.TABLE_ID, nextIDDO.TableID);
				command.SetParameter(NextIDDAO.NEXT_VAL, nextIDDO.NextVal);
				command.SetParameter(NextIDDAO.LANGUAGE, nextIDDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, nextIDDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_UPDATE, nextIDDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Next_ID table
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public virtual void DeleteNextID(NextIDDO nextIDDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(NextIDDAO.TABLE_ID, nextIDDO.TableID);
				reader = command.ExecuteReader();
				ProcessResult(reader, nextIDDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_DELETE, nextIDDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Next_ID table.
		/// </summary>
		/// <param name = "nextIDDO">NextIDDO nextIDDO.</param>
		public virtual NextIDDO ReadNextID(NextIDDO nextIDDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(NextIDDAO.TABLE_ID, nextIDDO.TableID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				nextIDDO = new NextIDDO();
				if (reader.Read()) {
					nextIDDO.TableID = (string)GetValue(reader, TABLE_ID);
					nextIDDO.NextVal = (int)GetValue(reader, NEXT_VAL);
					nextIDDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, nextIDDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_READ, nextIDDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return nextIDDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Next_ID table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadNextIDsAll(DataTransferObject dataTransferObject) {
			IDictionary nextIDs = new Hashtable();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				NextIDDO nextIDDO = null;
				while (reader.Read()) {
					nextIDDO = this.MapToDataTransferObject(reader);
					nextIDs.Add(nextIDDO.TableID, nextIDDO);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.NEXT_ID_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return nextIDs;
		}

	}
}
