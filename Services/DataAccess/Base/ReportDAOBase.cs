///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Report'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Report'.
	/// </summary>
	public class ReportDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "REPORT";
		public const string TABLE_NAME_KEY = "Report_SEQ";

		public const string CREATE = "CreateReport";
		public const string UPDATE = "UpdateReport";
		public const string DELETE = "DeleteReport";
		public const string DELETE_ALL = "DeleteAllReports";
		public const string READ = "ReadReport";
		public const string READ_ALL = "ReadAllReports";

		// Field Name Constants
		public const string REPORT_ID = "report_id";
		public const string REPORT_DATE = "report_date";
		public const string LANGUAGE_ID = "language_id";
		public const string REPORT_BY = "report_by";
		public const string REPORT_FILE = "report_file";
		public const string REPORT_DESCRIPTION = "report_description";
		public const string EMAILED = "emailed";
		public const string PRIVATE = "private";
		public const string PRIVATE_VIEW = "private_view";
		public const string REPORT_TYPE = "report_type";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ReportDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the Report data object
		/// </summary>
		/// <returns>Report data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual ReportDO MapToDataTransferObject(IDataReader reader) {
			ReportDO reportDO = new ReportDO();
			reportDO.ReportId = (int)GetValue(reader, REPORT_ID);
			reportDO.ReportDate = (DateTime)GetValue(reader, REPORT_DATE);
			reportDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			reportDO.ReportBy = (string)GetValue(reader, REPORT_BY);
			reportDO.ReportFile = (string)GetValue(reader, REPORT_FILE);
			reportDO.ReportDescription = (string)GetValue(reader, REPORT_DESCRIPTION);
			reportDO.Emailed = (bool)GetValue(reader, EMAILED);
			reportDO.Private = (string)GetValue(reader, PRIVATE);
			reportDO.PrivateView = (string)GetValue(reader, PRIVATE_VIEW);
			reportDO.GenerateNextID = false;
			return reportDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Report table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public virtual ReportDO CreateReport(ReportDO reportDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(ReportDAO.REPORT_DATE, reportDO.ReportDate);
				command.SetParameter(ReportDAO.LANGUAGE, reportDO.Language);
				command.SetParameter(ReportDAO.REPORT_BY, reportDO.ReportBy);
				command.SetParameter(ReportDAO.REPORT_FILE, reportDO.ReportFile);
				command.SetParameter(ReportDAO.REPORT_DESCRIPTION, reportDO.ReportDescription);
				command.SetParameter(ReportDAO.EMAILED, reportDO.Emailed);
				command.SetParameter(ReportDAO.PRIVATE, reportDO.Private);
				command.SetParameter(ReportDAO.PRIVATE_VIEW, reportDO.PrivateView);
				command.SetParameter(ReportDAO.REPORT_TYPE, reportDO.ReportType);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					reportDO.ReportId = reader.GetInt32(0);
				}
				ProcessResult(reader, reportDO.ReportId, reportDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_CREATE, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reportDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Report table.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public virtual void UpdateReport(ReportDO reportDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(ReportDAO.REPORT_ID, reportDO.ReportId);
				command.SetParameter(ReportDAO.REPORT_DATE, reportDO.ReportDate);
				command.SetParameter(ReportDAO.LANGUAGE, reportDO.Language);
				command.SetParameter(ReportDAO.REPORT_BY, reportDO.ReportBy);
				command.SetParameter(ReportDAO.REPORT_FILE, reportDO.ReportFile);
				command.SetParameter(ReportDAO.REPORT_DESCRIPTION, reportDO.ReportDescription);
				command.SetParameter(ReportDAO.EMAILED, reportDO.Emailed);
				command.SetParameter(ReportDAO.PRIVATE, reportDO.Private);
				command.SetParameter(ReportDAO.PRIVATE_VIEW, reportDO.PrivateView);
				reader = command.ExecuteReader();
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_UPDATE, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Report table
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public virtual void DeleteReport(ReportDO reportDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(ReportDAO.REPORT_ID, reportDO.ReportId);
				reader = command.ExecuteReader();
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_DELETE, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Report table.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public virtual ReportDO ReadReport(ReportDO reportDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(ReportDAO.REPORT_ID, reportDO.ReportId);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				reportDO = new ReportDO();
				if (reader.Read()) {
					reportDO.ReportId = (int)GetValue(reader, REPORT_ID);
					reportDO.ReportDate = (DateTime)GetValue(reader, REPORT_DATE);
					reportDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
					reportDO.ReportBy = (string)GetValue(reader, REPORT_BY);
					reportDO.ReportFile = (string)GetValue(reader, REPORT_FILE);
					reportDO.ReportDescription = (string)GetValue(reader, REPORT_DESCRIPTION);
					reportDO.Emailed = (bool)GetValue(reader, EMAILED);
					reportDO.Private = (string)GetValue(reader, PRIVATE);
					reportDO.PrivateView = (string)GetValue(reader, PRIVATE_VIEW);
					reportDO.ReportType = (string)GetValue(reader, REPORT_TYPE);
				}
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_READ, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reportDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Report table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadReportsAll(DataTransferObject dataTransferObject) {
			IList reports = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					reports.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reports;
		}

	}
}

