///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Translation_Master'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Translation_Master'.
	/// </summary>
	public class TranslationMasterDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "TRANSLATION_MASTER";
		public const string TABLE_NAME_KEY = "Translation_Master_SEQ";

		public const string CREATE = "CreateTranslationMaster";
		public const string UPDATE = "UpdateTranslationMaster";
		public const string DELETE = "DeleteTranslationMaster";
		public const string DELETE_ALL = "DeleteAllTranslationMasters";
		public const string READ = "ReadTranslationMaster";
		public const string READ_ALL = "ReadAllTranslationMasters";

		// Field Name Constants
		public const string TRANSLATION_MASTER_ID = "translation_master_id";
		public const string TRANSLATION_MASTER_DESCRIPTION = "translation_master_description";
		public const string TRANSLATION_MASTER_NAME = "translation_master_name";
		public const string TRANSLATION_MASTER_TYPE = "translation_master_type";
		public const string TRANSLATION_MASTER_VERSION = "translation_master_version";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TranslationMasterDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the TranslationMaster data object
		/// </summary>
		/// <returns>TranslationMaster data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual TranslationMasterDO MapToDataTransferObject(IDataReader reader) {
			TranslationMasterDO translationMasterDO = new TranslationMasterDO();
			translationMasterDO.TranslationMasterID = (int)GetValue(reader, TRANSLATION_MASTER_ID);
			translationMasterDO.TranslationMasterDescription = (string)GetValue(reader, TRANSLATION_MASTER_DESCRIPTION);
			translationMasterDO.TranslationMasterName = (string)GetValue(reader, TRANSLATION_MASTER_NAME);
			translationMasterDO.TranslationMasterType = (string)GetValue(reader, TRANSLATION_MASTER_TYPE);
			translationMasterDO.TranslationMasterVersion = (int)GetValue(reader, TRANSLATION_MASTER_VERSION);
			translationMasterDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			translationMasterDO.GenerateNextID = false;
			return translationMasterDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Translation_Master table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO</param>
		public virtual TranslationMasterDO CreateTranslationMaster(TranslationMasterDO translationMasterDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_DESCRIPTION, translationMasterDO.TranslationMasterDescription);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_NAME, translationMasterDO.TranslationMasterName);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_TYPE, translationMasterDO.TranslationMasterType);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_VERSION, translationMasterDO.TranslationMasterVersion);
				command.SetParameter(TranslationMasterDAO.LANGUAGE, translationMasterDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					translationMasterDO.TranslationMasterID = reader.GetInt32(0);
				}
				ProcessResult(reader, translationMasterDO.TranslationMasterID, translationMasterDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_CREATE, translationMasterDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasterDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Translation_Master table.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public virtual void UpdateTranslationMaster(TranslationMasterDO translationMasterDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_ID, translationMasterDO.TranslationMasterID);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_DESCRIPTION, translationMasterDO.TranslationMasterDescription);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_NAME, translationMasterDO.TranslationMasterName);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_TYPE, translationMasterDO.TranslationMasterType);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_VERSION, translationMasterDO.TranslationMasterVersion);
				command.SetParameter(TranslationMasterDAO.LANGUAGE, translationMasterDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationMasterDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_UPDATE, translationMasterDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Translation_Master table
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public virtual void DeleteTranslationMaster(TranslationMasterDO translationMasterDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_ID, translationMasterDO.TranslationMasterID);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationMasterDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_DELETE, translationMasterDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Translation_Master table.
		/// </summary>
		/// <param name = "translationMasterDO">TranslationMasterDO translationMasterDO.</param>
		public virtual TranslationMasterDO ReadTranslationMaster(TranslationMasterDO translationMasterDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(TranslationMasterDAO.TRANSLATION_MASTER_ID, translationMasterDO.TranslationMasterID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				translationMasterDO = new TranslationMasterDO();
				if (reader.Read()) {
					translationMasterDO.TranslationMasterID = (int)GetValue(reader, TRANSLATION_MASTER_ID);
					translationMasterDO.TranslationMasterDescription = (string)GetValue(reader, TRANSLATION_MASTER_DESCRIPTION);
					translationMasterDO.TranslationMasterName = (string)GetValue(reader, TRANSLATION_MASTER_NAME);
					translationMasterDO.TranslationMasterType = (string)GetValue(reader, TRANSLATION_MASTER_TYPE);
					translationMasterDO.TranslationMasterVersion = (int)GetValue(reader, TRANSLATION_MASTER_VERSION);
					translationMasterDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, translationMasterDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_READ, translationMasterDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasterDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation_Master table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadTranslationMastersAll(DataTransferObject dataTransferObject) {
			IList translationMasters = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					translationMasters.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasters;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation_Master table to populate list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		/// <returns>Returns a collection of ListItem Data Objects</returns>
		public virtual ICollection ReadTranslationMastersAllList(DataTransferObject dataTransferObject) {
			IList translationMasters = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				ListItemDO listItem = null;
				while (reader.Read()) {
					listItem = new ListItemDO();
					listItem.ValueMember = Convert.ToString(GetValue(reader, TranslationMasterDO.TRANSLATION_MASTER_ID));
					listItem.DisplayMember = (string)GetValue(reader, TranslationMasterDO.TRANSLATION_MASTER_NAME);
					translationMasters.Add(listItem);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_MASTER_CANNOT_READ_ALL, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationMasters;
		}

	}
}
