///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Researched_Content'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Researched_Content'.
	/// </summary>
	public class ResearchedContentDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "RESEARCHED_CONTENT";
		public const string TABLE_NAME_KEY = "Researched_Content_SEQ";

		public const string CREATE = "CreateResearchedContent";
		public const string UPDATE = "UpdateResearchedContent";
		public const string DELETE = "DeleteResearchedContent";
		public const string DELETE_ALL = "DeleteAllResearchedContents";
		public const string READ = "ReadResearchedContent";
		public const string READ_ALL = "ReadAllResearchedContents";

		// Field Name Constants
		public const string RESEARCHED_CONTENT_ID = "researched_content_id";
		public const string CONTENT = "content";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public ResearchedContentDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the ResearchedContent data object
		/// </summary>
		/// <returns>ResearchedContent data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual ResearchedContentDO MapToDataTransferObject(IDataReader reader) {
			ResearchedContentDO researchedContentDO = new ResearchedContentDO();
			researchedContentDO.ResearchedContentID = (int)GetValue(reader, RESEARCHED_CONTENT_ID);
			researchedContentDO.Content = (string)GetValue(reader, CONTENT);
			researchedContentDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			researchedContentDO.GenerateNextID = false;
			return researchedContentDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Researched_Content table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "researchedContentDO">ResearchedContentDO researchedContentDO</param>
		public virtual ResearchedContentDO CreateResearchedContent(ResearchedContentDO researchedContentDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(ResearchedContentDAO.CONTENT, researchedContentDO.Content);
				command.SetParameter(ResearchedContentDAO.LANGUAGE, researchedContentDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					researchedContentDO.ResearchedContentID = reader.GetInt32(0);
				}
				ProcessResult(reader, researchedContentDO.ResearchedContentID, researchedContentDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_CREATE, researchedContentDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return researchedContentDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Researched_Content table.
		/// </summary>
		/// <param name = "researchedContentDO">ResearchedContentDO researchedContentDO.</param>
		public virtual void UpdateResearchedContent(ResearchedContentDO researchedContentDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(ResearchedContentDAO.RESEARCHED_CONTENT_ID, researchedContentDO.ResearchedContentID);
				command.SetParameter(ResearchedContentDAO.CONTENT, researchedContentDO.Content);
				command.SetParameter(ResearchedContentDAO.LANGUAGE, researchedContentDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, researchedContentDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_UPDATE, researchedContentDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Researched_Content table
		/// </summary>
		/// <param name = "researchedContentDO">ResearchedContentDO researchedContentDO.</param>
		public virtual void DeleteResearchedContent(ResearchedContentDO researchedContentDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(ResearchedContentDAO.RESEARCHED_CONTENT_ID, researchedContentDO.ResearchedContentID);
				reader = command.ExecuteReader();
				ProcessResult(reader, researchedContentDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_DELETE, researchedContentDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Researched_Content table.
		/// </summary>
		/// <param name = "researchedContentDO">ResearchedContentDO researchedContentDO.</param>
		public virtual ResearchedContentDO ReadResearchedContent(ResearchedContentDO researchedContentDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(ResearchedContentDAO.RESEARCHED_CONTENT_ID, researchedContentDO.ResearchedContentID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				researchedContentDO = new ResearchedContentDO();
				if (reader.Read()) {
					researchedContentDO.ResearchedContentID = (int)GetValue(reader, RESEARCHED_CONTENT_ID);
					researchedContentDO.Content = (string)GetValue(reader, CONTENT);
					researchedContentDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, researchedContentDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_READ, researchedContentDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return researchedContentDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Researched_Content table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadResearchedContentsAll(DataTransferObject dataTransferObject) {
			IList researchedContents = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					researchedContents.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return researchedContents;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Researched_Content table to populate list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		/// <returns>Returns a collection of ListItem Data Objects</returns>
		public virtual ICollection ReadResearchedContentsAllList(DataTransferObject dataTransferObject) {
			IList researchedContents = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				ListItemDO listItem = null;
				while (reader.Read()) {
					listItem = new ListItemDO();
					listItem.ValueMember = Convert.ToString(GetValue(reader, ResearchedContentDO.RESEARCHED_CONTENT_ID));
					listItem.DisplayMember = (string)GetValue(reader, ResearchedContentDO.CONTENT);
					researchedContents.Add(listItem);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.RESEARCHED_CONTENT_CANNOT_READ_ALL, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return researchedContents;
		}

	}
}
