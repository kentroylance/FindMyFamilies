///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'App_Settings'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'App_Settings'.
	/// </summary>
	public class AppSettingsDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "APP_SETTINGS";
		public const string TABLE_NAME_KEY = "App_Settings_SEQ";

		public const string CREATE = "CreateAppSettings";
		public const string UPDATE = "UpdateAppSettings";
		public const string DELETE = "DeleteAppSettings";
		public const string DELETE_ALL = "DeleteAllAppSettingss";
		public const string READ = "ReadAppSettings";
		public const string READ_ALL = "ReadAllAppSettingss";

		// Field Name Constants
		public const string APP_SETTINGS_ID = "app_settings_id";
		public const string MEMBER_ID = "member_id";
		public const string SETTINGS = "settings";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public AppSettingsDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the AppSettings data object
		/// </summary>
		/// <returns>AppSettings data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual AppSettingsDO MapToDataTransferObject(IDataReader reader) {
			AppSettingsDO appSettingsDO = new AppSettingsDO();
			appSettingsDO.AppSettingsID = (int)GetValue(reader, APP_SETTINGS_ID);
			appSettingsDO.MemberID = (int)GetValue(reader, MEMBER_ID);
			appSettingsDO.Settings = (string)GetValue(reader, SETTINGS);
			appSettingsDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			appSettingsDO.GenerateNextID = false;
			return appSettingsDO;
		}

		/// <summary>
		/// Purpose: Creates a record in App_Settings table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO</param>
		public virtual AppSettingsDO CreateAppSettings(AppSettingsDO appSettingsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(AppSettingsDAO.MEMBER_ID, appSettingsDO.MemberID);
				command.SetParameter(AppSettingsDAO.SETTINGS, appSettingsDO.Settings);
				command.SetParameter(AppSettingsDAO.LANGUAGE, appSettingsDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					appSettingsDO.AppSettingsID = reader.GetInt32(0);
				}
				ProcessResult(reader, appSettingsDO.AppSettingsID, appSettingsDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_CREATE, appSettingsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return appSettingsDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in App_Settings table.
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public virtual void UpdateAppSettings(AppSettingsDO appSettingsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(AppSettingsDAO.APP_SETTINGS_ID, appSettingsDO.AppSettingsID);
				command.SetParameter(AppSettingsDAO.MEMBER_ID, appSettingsDO.MemberID);
				command.SetParameter(AppSettingsDAO.SETTINGS, appSettingsDO.Settings);
				command.SetParameter(AppSettingsDAO.LANGUAGE, appSettingsDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, appSettingsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_UPDATE, appSettingsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in App_Settings table
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public virtual void DeleteAppSettings(AppSettingsDO appSettingsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(AppSettingsDAO.APP_SETTINGS_ID, appSettingsDO.AppSettingsID);
				reader = command.ExecuteReader();
				ProcessResult(reader, appSettingsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_DELETE, appSettingsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in App_Settings table.
		/// </summary>
		/// <param name = "appSettingsDO">AppSettingsDO appSettingsDO.</param>
		public virtual AppSettingsDO ReadAppSettings(AppSettingsDO appSettingsDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(AppSettingsDAO.APP_SETTINGS_ID, appSettingsDO.AppSettingsID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				appSettingsDO = new AppSettingsDO();
				if (reader.Read()) {
					appSettingsDO.AppSettingsID = (int)GetValue(reader, APP_SETTINGS_ID);
					appSettingsDO.MemberID = (int)GetValue(reader, MEMBER_ID);
					appSettingsDO.Settings = (string)GetValue(reader, SETTINGS);
					appSettingsDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, appSettingsDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_READ, appSettingsDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return appSettingsDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the App_Settings table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadAppSettingssAll(DataTransferObject dataTransferObject) {
			IList appSettingss = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					appSettingss.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return appSettingss;
		}

		/// <summary>
		/// Purpose: Reads all the records from the App_Settings table to populate list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		/// <returns>Returns a collection of ListItem Data Objects</returns>
		public virtual ICollection ReadAppSettingssAllList(DataTransferObject dataTransferObject) {
			IList appSettingss = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				ListItemDO listItem = null;
				while (reader.Read()) {
					listItem = new ListItemDO();
					listItem.ValueMember = Convert.ToString(GetValue(reader, AppSettingsDO.APP_SETTINGS_ID));
					listItem.DisplayMember = (string)GetValue(reader, AppSettingsDO.MEMBER_ID);
					appSettingss.Add(listItem);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.APP_SETTINGS_CANNOT_READ_ALL, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return appSettingss;
		}

	}
}
