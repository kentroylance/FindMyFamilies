///////////////////////////////////////////////////////////////////////////
// Description: Data Access Base class for the 'Translation'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;

using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

// Please do not modify any code in this auto generated class.  This code will be overwritten when the generator is executed.
namespace FindMyFamilies.DataAccess {

	/// <summary>
	/// Purpose: Data Access Base class for table 'Translation'.
	/// </summary>
	public class TranslationDAOBase : DataAccessObjectBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;

		// Stored Procedure Constants
		public const string TABLE_NAME = "TRANSLATION";
		public const string TABLE_NAME_KEY = "Translation_SEQ";

		public const string CREATE = "CreateTranslation";
		public const string UPDATE = "UpdateTranslation";
		public const string DELETE = "DeleteTranslation";
		public const string DELETE_ALL = "DeleteAllTranslations";
		public const string READ = "ReadTranslation";
		public const string READ_ALL = "ReadAllTranslations";

		// Field Name Constants
		public const string TRANSLATION_ID = "translation_id";
		public const string TRANSLATION_DETAIL_ID = "translation_detail_id";
		public const string TRANSLATION_TEXT = "translation_text";
		public const string LANGUAGE_ID = "language_id";

		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TranslationDAOBase() : base() {
		}

		/// <summary>
		/// Purpose: Maps the fields of the resultsset to the attributes of the Translation data object
		/// </summary>
		/// <returns>Translation data object populated with data from the result set</returns>
		/// <param name = "reader">IDataReader reader</param>
		public virtual TranslationDO MapToDataTransferObject(IDataReader reader) {
			TranslationDO translationDO = new TranslationDO();
			translationDO.TranslationID = (int)GetValue(reader, TRANSLATION_ID);
			translationDO.TranslationDetailID = (int)GetValue(reader, TRANSLATION_DETAIL_ID);
			translationDO.TranslationText = (string)GetValue(reader, TRANSLATION_TEXT);
			translationDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
			translationDO.GenerateNextID = false;
			return translationDO;
		}

		/// <summary>
		/// Purpose: Creates a record in Translation table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "translationDO">TranslationDO translationDO</param>
		public virtual TranslationDO CreateTranslation(TranslationDO translationDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(CREATE);
				command.SetParameter(TranslationDAO.TRANSLATION_DETAIL_ID, translationDO.TranslationDetailID);
				command.SetParameter(TranslationDAO.TRANSLATION_TEXT, translationDO.TranslationText);
				command.SetParameter(TranslationDAO.LANGUAGE, translationDO.Language);
				reader = command.ExecuteReader();
				if (reader.Read()) {
					translationDO.TranslationID = reader.GetInt32(0);
				}
				ProcessResult(reader, translationDO.TranslationID, translationDO, Constants.OPERATION_CREATE, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_CREATE, translationDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDO;
		}


		/// <summary>
		/// Purpose: Updates and existing record in Translation table.
		/// </summary>
		/// <param name = "translationDO">TranslationDO translationDO.</param>
		public virtual void UpdateTranslation(TranslationDO translationDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(UPDATE);
				command.SetParameter(TranslationDAO.TRANSLATION_ID, translationDO.TranslationID);
				command.SetParameter(TranslationDAO.TRANSLATION_DETAIL_ID, translationDO.TranslationDetailID);
				command.SetParameter(TranslationDAO.TRANSLATION_TEXT, translationDO.TranslationText);
				command.SetParameter(TranslationDAO.LANGUAGE, translationDO.Language);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_UPDATE, translationDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Delete record in Translation table
		/// </summary>
		/// <param name = "translationDO">TranslationDO translationDO.</param>
		public virtual void DeleteTranslation(TranslationDO translationDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(DELETE);
				command.SetParameter(TranslationDAO.TRANSLATION_ID, translationDO.TranslationID);
				reader = command.ExecuteReader();
				ProcessResult(reader, translationDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_DELETE, translationDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
		}

		/// <summary>
		/// Purpose: Reads a record by primary key in Translation table.
		/// </summary>
		/// <param name = "translationDO">TranslationDO translationDO.</param>
		public virtual TranslationDO ReadTranslation(TranslationDO translationDO) {
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ);
				command.SetParameter(TranslationDAO.TRANSLATION_ID, translationDO.TranslationID);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				translationDO = new TranslationDO();
				if (reader.Read()) {
					translationDO.TranslationID = (int)GetValue(reader, TRANSLATION_ID);
					translationDO.TranslationDetailID = (int)GetValue(reader, TRANSLATION_DETAIL_ID);
					translationDO.TranslationText = (string)GetValue(reader, TRANSLATION_TEXT);
					translationDO.LanguageID = (string)GetValue(reader, LANGUAGE_ID);
				}
				ProcessResult(reader, translationDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_READ, translationDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translationDO;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		public virtual ICollection ReadTranslationsAll(DataTransferObject dataTransferObject) {
			IList translations = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(READ_ALL);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					translations.Add(this.MapToDataTransferObject(reader));
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_READ, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translations;
		}

		/// <summary>
		/// Purpose: Reads all the records from the Translation table to populate list control.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject</param>
		/// <returns>Returns a collection of ListItem Data Objects</returns>
		public virtual ICollection ReadTranslationsAllList(DataTransferObject dataTransferObject) {
			IList translations = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(MethodBase.GetCurrentMethod().Name);
				command.SetParameter(LANGUAGE, dataTransferObject.Language);
				reader = command.ExecuteReader();

				// populate the detail object from the SQL Server Data Reader
				ListItemDO listItem = null;
				while (reader.Read()) {
					listItem = new ListItemDO();
					listItem.ValueMember = Convert.ToString(GetValue(reader, TranslationDO.TRANSLATION_ID));
					listItem.DisplayMember = (string)GetValue(reader, TranslationDO.TRANSLATION_TEXT);
					translations.Add(listItem);
				}
				ProcessResult(reader, dataTransferObject, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.TRANSLATION_CANNOT_READ_ALL, dataTransferObject.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return translations;
		}

	}
}
