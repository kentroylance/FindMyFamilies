///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the 'Report'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;


using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.DataAccess {
	/// <summary>
	/// Purpose: Data Access class for the 'Report'.
	/// </summary>
	public class ReportDAO : ReportDAOBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;
		// Stored Procedure Name Constants

		// Field Name Constants

		/// <summary>
		/// Purpose: Base Class constructor.
		/// </summary>
		public ReportDAO() : base() {
		}

		/// <summary>
		/// Purpose: Creates a new record in Report table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public override ReportDO CreateReport(ReportDO reportDO) {
			return base.CreateReport(reportDO);
		}

		/// <summary>
		/// Purpose: Update a record in Report.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO</param>
		public override void UpdateReport(ReportDO reportDO) {
			base.UpdateReport(reportDO);
		}

		/// <summary>
		/// Purpose: Delete a record in Report.
		/// </summary>
		/// <param name = "reportDO">ReportDO report</param>
		public override void DeleteReport(ReportDO reportDO) {
			base.DeleteReport(reportDO);
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData a record in Report table by primary key.
		/// </summary>
		/// <param name = "reportDO">ReportDO reportDO.</param>
		public override ReportDO ReadReport(ReportDO reportDO) {
			return base.ReadReport(reportDO);
		}

		/// <summary>
		/// Purpose: Retrieves all records in Report table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public override ICollection ReadReportsAll(DataTransferObject dataTransferObject) {
			return base.ReadReportsAll(dataTransferObject);
		}

		/// <summary>
		/// Purpose: Reads a page of records from table Report by search criteria.
		/// </summary>
		/// <returns>Returns a collection of Reports</returns>
		public virtual ICollection ReadReportsByPage(ReportDO reportDO) {
			IList reports = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(PagingDO.READ_BY_PAGE);
				command.SetParameter(PagingDO.PAGING_TABLE_NAME, TABLE_NAME);
				command.SetParameter(PagingDO.PAGING_PRIMARY_KEY, ReportDAO.REPORT_ID);
				command.SetParameter(PagingDO.PAGING_FIELDS, "*");
				command.SetParameter(PagingDO.PAGING_ORDER, ReportDAO.REPORT_ID);
				command.SetParameter(PagingDO.PAGING_PAGE_SIZE, reportDO.Paging.PageSize);
				command.SetParameter(PagingDO.PAGING_PAGE_INDEX, reportDO.Paging.PageIndex);
				command.SetParameter(PagingDO.PAGING_FILTER, ReportDAO.REPORT_ID + " > 1");
				command.SetParameter(LANGUAGE, reportDO.Language);
				reader = command.ExecuteReader();
		
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					reports.Add(this.MapToDataTransferObject(reader));
				}
				if (reader.NextResult()) {
					reader.Read();
					if (reports.Count < 1) {
						reports.Add(new ReportDO());
					}
					((ReportDO)reports[0]).Paging.TotalRecords = reader.GetInt32(0);
				}
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.REPORT_CANNOT_READ_BY_PAGE, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reports;
		}

        /// <summary>
		/// Purpose: Reads reports by user records from table Report by search criteria.
		/// </summary>
		/// <returns>Returns a collection of Reports</returns>
		public virtual ICollection ReadReportsByUser(ReportDO reportDO) {
			IList reports = new ArrayList();
			IDataReader reader = null;
			try {
	        	IDataCommand command = dataSource.GetCommand(ReportDO.READ_REPORTS_BY_USER);
            	command.SetParameter(ReportDAO.USER_ID, reportDO.UserID);
            	command.SetParameter(ReportDAO.RESEARCH_TYPE, reportDO.ResearchType);
				command.SetParameter(LANGUAGE, reportDO.Language);
				reader = command.ExecuteReader();
		
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					reports.Add(this.MapToDataTransferObject(reader));
				}
				if (reader.NextResult()) {
					reader.Read();
					if (reports.Count < 1) {
						reports.Add(new ReportDO());
					}
					((ReportDO)reports[0]).Paging.TotalRecords = reader.GetInt32(0);
				}
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.READ_REPORTS_BY_USER, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reports;
		}

                		/// <summary>
		/// Purpose: Reads reports by report_by records from table Report by search criteria.
		/// </summary>
		/// <returns>Returns a collection of Reports</returns>
		public virtual IList ReadReportsList(ReportDO reportDO) {
			IList reports = new ArrayList();
			IDataReader reader = null;
			try {
	        	IDataCommand command = dataSource.GetCommand(ReportDO.READ_REPORTS_BY_USER);
            	command.SetParameter(ReportDAO.USER_ID, reportDO.UserID);
            	command.SetParameter(ReportDAO.RESEARCH_TYPE, reportDO.ResearchType);
				command.SetParameter(LANGUAGE, reportDO.Language);
				reader = command.ExecuteReader();
		
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
				    int reportId = (int) GetValue(reader, REPORT_ID);
					reports.Add(new ReportListItemDO(Convert.ToString(reportId), ((DateTime)GetValue(reader, REPORT_DATE)).ToString(Constants.DATETIME_FORMAT), (string)GetValue(reader, REPORT_FILE), (string)GetValue(reader, PERSON_ID), (string)GetValue(reader, PERSON_NAME), (string)GetValue(reader, RECORDS), (string)GetValue(reader, RESEARCH_TYPE), (string)GetValue(reader, GENERATION)));
				}
				if (reader.NextResult()) {
					reader.Read();
				}
				ProcessResult(reader, reportDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.READ_REPORTS_LIST, reportDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return reports;
		}

    }
}

