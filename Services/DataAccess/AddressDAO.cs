///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the 'Address'
// Generated by FindMyFamilies Generator
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.EnterpriseServices;
using System.Reflection;


using FindMyFamilies.Data;
using FindMyFamilies.Util;
using FindMyFamilies.Exceptions;
using FindMyFamilies.DataAccess;

namespace FindMyFamilies.DataAccess {
	/// <summary>
	/// Purpose: Data Access class for the 'Address'.
	/// </summary>
	public class AddressDAO : AddressDAOBase {
		private static readonly object logCategory = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType;
		// Stored Procedure Name Constants

		// Field Name Constants

		/// <summary>
		/// Purpose: Base Class constructor.
		/// </summary>
		public AddressDAO() : base() {
		}

		/// <summary>
		/// Purpose: Creates a new record in Address table and returns the generated primary key by reference.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public override AddressDO CreateAddress(AddressDO addressDO) {
			return base.CreateAddress(addressDO);
		}

		/// <summary>
		/// Purpose: Update a record in Address.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO</param>
		public override void UpdateAddress(AddressDO addressDO) {
			base.UpdateAddress(addressDO);
		}

		/// <summary>
		/// Purpose: Delete a record in Address.
		/// </summary>
		/// <param name = "addressDO">AddressDO address</param>
		public override void DeleteAddress(AddressDO addressDO) {
			base.DeleteAddress(addressDO);
		}

		/// <summary>
		/// Purpose: RetrieveFamilySearchData a record in Address table by primary key.
		/// </summary>
		/// <param name = "addressDO">AddressDO addressDO.</param>
		public override AddressDO ReadAddress(AddressDO addressDO) {
			return base.ReadAddress(addressDO);
		}

		/// <summary>
		/// Purpose: Retrieves all records in Address table.
		/// </summary>
		/// <param name = "dataTransferObject">DataTransferObject dataTransferObject.</param>
		public override ICollection ReadAddresssAll(DataTransferObject dataTransferObject) {
			return base.ReadAddresssAll(dataTransferObject);
		}

		/// <summary>
		/// Purpose: Reads a page of records from table Address by search criteria.
		/// </summary>
		/// <returns>Returns a collection of Addresss</returns>
		public virtual ICollection ReadAddresssByPage(AddressDO addressDO) {
			IList addresss = new ArrayList();
			IDataReader reader = null;
			try {
				IDataCommand command = dataSource.GetCommand(PagingDO.READ_BY_PAGE);
				command.SetParameter(PagingDO.PAGING_TABLE_NAME, TABLE_NAME);
				command.SetParameter(PagingDO.PAGING_PRIMARY_KEY, AddressDAO.ADDRESS_ID);
				command.SetParameter(PagingDO.PAGING_FIELDS, "*");
				command.SetParameter(PagingDO.PAGING_ORDER, AddressDAO.ADDRESS_ID);
				command.SetParameter(PagingDO.PAGING_PAGE_SIZE, addressDO.Paging.PageSize);
				command.SetParameter(PagingDO.PAGING_PAGE_INDEX, addressDO.Paging.PageIndex);
				command.SetParameter(PagingDO.PAGING_FILTER, AddressDAO.ADDRESS_ID + " > 1");
				command.SetParameter(LANGUAGE, addressDO.Language);
				reader = command.ExecuteReader();
		
				// populate the detail object from the SQL Server Data Reader
				while (reader.Read()) {
					addresss.Add(this.MapToDataTransferObject(reader));
				}
				if (reader.NextResult()) {
					reader.Read();
					if (addresss.Count < 1) {
						addresss.Add(new AddressDO());
					}
					((AddressDO)addresss[0]).Paging.TotalRecords = reader.GetInt32(0);
				}
				ProcessResult(reader, addressDO, logCategory);
			} catch (Exception ex) {
				string errorMessage = Resource.GetErrorMessage(MessageKeys.ADDRESS_CANNOT_READ_BY_PAGE, addressDO.Language, ex);
				throw new DataAccessException(errorMessage, ex, logCategory);
			} finally {
				if (reader != null) {
					reader.Close();
				}
			}
			return addresss;
		}

	}
}
