// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;

namespace Gx.Types {

  /// <remarks>
  ///  Enumeration of known field value types.
  /// </remarks>
  /// <summary>
  ///  Enumeration of known field value types.
  /// </summary>
  public enum FieldValueType {

    /// <summary>
    ///  Unspecified enum value.
    /// </summary>
    [System.Xml.Serialization.XmlEnumAttribute(Name="__NULL__")]
    [System.Xml.Serialization.SoapEnumAttribute(Name="__NULL__")]
    NULL,

    /// <summary>
    ///   The field value is original, extracted directly from the record. What you see is what you get, including misspellings and other errors in the record.
    /// </summary>
    Original,

    /// <summary>
    ///   The field value is interpreted, meaning a user or other automated process applied some reasoning to interpret the value.
    /// </summary>
    Interpreted,

    /// <summary>
    ///   Custom
    /// </summary>
    OTHER
  }

  /// <remarks>
  /// Utility class for converting to/from the QNames associated with FieldValueType.
  /// </remarks>
  /// <summary>
  /// Utility class for converting to/from the QNames associated with FieldValueType.
  /// </summary>
  public static class FieldValueTypeQNameUtil {

    /// <summary>
    /// Get the known FieldValueType for a given QName. If the QName isn't a known QName, FieldValueType.OTHER will be returned.
    /// </summary>
    public static FieldValueType ConvertFromKnownQName(string qname) {
      if (qname != null) {
        if ("http://gedcomx.org/Original".Equals(qname)) {
          return FieldValueType.Original;
        }
        if ("http://gedcomx.org/Interpreted".Equals(qname)) {
          return FieldValueType.Interpreted;
        }
      }
      return FieldValueType.OTHER;
    }

    /// <summary>
    /// Convert the known FieldValueType to a QName. If FieldValueType.OTHER, an ArgumentException will be thrown.
    /// </summary>
    public static string ConvertToKnownQName(FieldValueType known) {
      switch (known) {
        case FieldValueType.Original:
          return "http://gedcomx.org/Original";
        case FieldValueType.Interpreted:
          return "http://gedcomx.org/Interpreted";
        default:
          throw new System.ArgumentException("No known QName for: " + known, "known");
      }
    }
  }
}
