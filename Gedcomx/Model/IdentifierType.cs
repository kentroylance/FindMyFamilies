// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;

namespace Gx.Types {

  /// <remarks>
  ///  Enumeration of standard identifier types.
  /// </remarks>
  /// <summary>
  ///  Enumeration of standard identifier types.
  /// </summary>
  public enum IdentifierType {

    /// <summary>
    ///  Unspecified enum value.
    /// </summary>
    [System.Xml.Serialization.XmlEnumAttribute(Name="__NULL__")]
    [System.Xml.Serialization.SoapEnumAttribute(Name="__NULL__")]
    NULL,

    /// <summary>
    ///   The primary identifier for the resource.
    /// </summary>
    Primary,

    /// <summary>
    ///   An identifier for the evidence that supports the resource. For example, when a conclusion
    ///   about a person is extracted, analyzed and evaluated atomically within the context of a
    ///   single source, it takes the form of a (extracted) person conclusion, and the extracted conclusion
    ///   may supply an identifier for the person. As all evidence for the person is gathered, the
    ///   (working) person conclusion identifies the evidence used to support the conclusion by including
    ///   each evidence identifier in the list of identifiers for the person.
    /// </summary>
    Evidence,

    /// <summary>
    ///   An identifier that has been relegated, deprecated, or otherwise downgraded. This
    ///   identifier is commonly used as the result of a merge when what was once a primary
    ///   identifier for a person is no longer primary.
    /// </summary>
    Deprecated,

    /// <summary>
    ///   An identifier that is considered to be a long-term persistent identifier. Applications
    ///   that provide persistent identifiers are claiming that links to the resource using the identifier
    ///   won't break.
    /// </summary>
    Persistent,

    /// <summary>
    ///  (no documentation provided)
    /// </summary>
    OTHER
  }

  /// <remarks>
  /// Utility class for converting to/from the QNames associated with IdentifierType.
  /// </remarks>
  /// <summary>
  /// Utility class for converting to/from the QNames associated with IdentifierType.
  /// </summary>
  public static class IdentifierTypeQNameUtil {

    /// <summary>
    /// Get the known IdentifierType for a given QName. If the QName isn't a known QName, IdentifierType.OTHER will be returned.
    /// </summary>
    public static IdentifierType ConvertFromKnownQName(string qname) {
      if (qname != null) {
        if ("http://gedcomx.org/Primary".Equals(qname)) {
          return IdentifierType.Primary;
        }
        if ("http://gedcomx.org/Evidence".Equals(qname)) {
          return IdentifierType.Evidence;
        }
        if ("http://gedcomx.org/Deprecated".Equals(qname)) {
          return IdentifierType.Deprecated;
        }
        if ("http://gedcomx.org/Persistent".Equals(qname)) {
          return IdentifierType.Persistent;
        }
      }
      return IdentifierType.OTHER;
    }

    /// <summary>
    /// Convert the known IdentifierType to a QName. If IdentifierType.OTHER, an ArgumentException will be thrown.
    /// </summary>
    public static string ConvertToKnownQName(IdentifierType known) {
      switch (known) {
        case IdentifierType.Primary:
          return "http://gedcomx.org/Primary";
        case IdentifierType.Evidence:
          return "http://gedcomx.org/Evidence";
        case IdentifierType.Deprecated:
          return "http://gedcomx.org/Deprecated";
        case IdentifierType.Persistent:
          return "http://gedcomx.org/Persistent";
        default:
          throw new System.ArgumentException("No known QName for: " + known, "known");
      }
    }
  }
}
